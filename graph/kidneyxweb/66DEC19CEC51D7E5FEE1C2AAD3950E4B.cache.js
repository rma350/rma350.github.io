kidneyxweb.onScriptDownloaded(["var $wnd = $wnd || window.parent;\nvar __gwtModuleFunction = $wnd.kidneyxweb;\nvar $sendStats = __gwtModuleFunction.__sendStats;\n$sendStats('moduleStartup', 'moduleEvalStart');\nvar $gwt_version = \"2.6.0\";\nvar $strongName = '66DEC19CEC51D7E5FEE1C2AAD3950E4B';\nvar $doc = $wnd.document;function __gwtStartLoadingFragment(frag) {\nvar fragFile = 'deferredjs/' + $strongName + '/' + frag + '.cache.js';\nreturn __gwtModuleFunction.__startLoadingFragment(fragFile);\n}\nfunction __gwtInstallCode(code) {return __gwtModuleFunction.__installRunAsyncCode(code);}\nvar $stats = $wnd.__gwtStatsEvent ? function(a) {return $wnd.__gwtStatsEvent(a);} : null;\nvar $sessionId = $wnd.__gwtStatsSessionId ? $wnd.__gwtStatsSessionId : null;\nvar _, P0_longLit = {l:0, m:0, h:0}, seedTable = {}, Q$Object = 0, Q$String = 1, Q$Drawable = 2, Q$SceneDemos$Node = 3, Q$JavaScriptException = 4, Q$SerializableThrowable = 5, Q$Style$HasCssName = 6, Q$Style$TextAlign = 7, Q$HasDirection$Direction = 8, Q$LongLibBase$LongEmul = 9, Q$HtmlLogFormatter = 10, Q$EventListener = 11, Q$Serializable = 12, Q$CharSequence = 13, Q$Comparable = 14, Q$Enum = 15, Q$StackTraceElement = 16, Q$Throwable = 17, Q$Date = 18, Q$List = 19, Q$Map = 20, Q$Map$Entry = 21, Q$RandomAccess = 22, Q$Set = 23, Q$Handler = 24, Q$Handler_$1 = 25, Q$Logger = 26, CM$ = {};\nfunction newSeed(id_0){\n  return new seedTable[id_0];\n}\n\nfunction defineSeed(id_0, superSeed, castableTypeMap){\n  var seed = seedTable[id_0];\n  if (seed && !seed.___clazz$) {\n    _ = seed.prototype;\n  }\n   else {\n    !seed && (seed = seedTable[id_0] = function(){\n    }\n    );\n    _ = seed.prototype = superSeed < 0?{}:newSeed(superSeed);\n    _.castableTypeMap$ = castableTypeMap;\n  }\n  for (var i = 3; i < arguments.length; ++i) {\n    arguments[i].prototype = _;\n  }\n  if (seed.___clazz$) {\n    _.___clazz$ = seed.___clazz$;\n    seed.___clazz$ = null;\n  }\n}\n\nfunction makeCastMap(a){\n  var result = {};\n  for (var i = 0, c = a.length; i < c; ++i) {\n    result[a[i]] = 1;\n  }\n  return result;\n}\n\nfunction nullMethod(){\n}\n\nfunction Object_1(){\n}\n\ndefineSeed(1, -1, CM$, Object_1);\n_.equals$ = function equals(other){\n  return this === other;\n}\n;\n_.getClass$ = function getClass_0(){\n  return this.___clazz$;\n}\n;\n_.hashCode$ = function hashCode_0(){\n  return getHashCode(this);\n}\n;\n_.toString$ = function toString_0(){\n  return this.___clazz$.typeName + '@' + toPowerOfTwoString(this.hashCode$());\n}\n;\n_.toString = function(){\n  return this.toString$();\n}\n;\n_.typeMarker$ = nullMethod;\nfunction $moveTo(this$static, screenCenterX, screenCenterY){\n  var newBLX, newBLY, newWorldBLX, newWorldBLY, newWorldCenterX, newWorldCenterY, worldNewBL, worldNewCenter;\n  newBLX = screenCenterX - ~~(this$static.screenWidthPx / 2);\n  newBLY = screenCenterY - ~~(this$static.screenHeightPx / 2);\n  ($clinit_System() , out_0).println('Moving to screen coords (x,y): ' + screenCenterX + ', ' + screenCenterY);\n  worldNewCenter = nMult(nInvert(this$static.view), nCreateVec4(screenCenterX, screenCenterY, 0, 1));\n  newWorldCenterX = worldNewCenter[0];\n  newWorldCenterY = worldNewCenter[1];\n  out_0.println('Moving to world coords center (x,y): ' + newWorldCenterX + ', ' + newWorldCenterY);\n  worldNewBL = nMult(nInvert(this$static.view), nCreateVec4(newBLX, newBLY, 0, 1));\n  newWorldBLX = worldNewBL[0];\n  newWorldBLY = worldNewBL[1];\n  out_0.println('Moving to world coords bottom left (x,y): ' + newWorldBLX + ', ' + newWorldBLY);\n  $moveWorldBLTo(this$static, newWorldBLX, newWorldBLY);\n}\n\nfunction $moveWorldBLTo(this$static, x_0, y_0){\n  nSetIdentity(this$static.view);\n  nScale(this$static.view, this$static.zoomLevel, this$static.zoomLevel);\n  nTranslate(this$static.view, -x_0, -y_0);\n}\n\nfunction $setViewport(this$static, width_0, height){\n  nSetOrtho2D(this$static.projection, 0, width_0, 0, height);\n  this$static.screenWidthPx = width_0;\n  this$static.screenHeightPx = height;\n}\n\nfunction $zoom(this$static, scaleFactor, zoomAboutX, zoomAboutY){\n  var tx, ty, worldZoomPoint;\n  worldZoomPoint = nMult(nInvert(this$static.view), nCreateVec4(zoomAboutX, zoomAboutY, 0, 1));\n  this$static.zoomLevel *= scaleFactor;\n  tx = zoomAboutX / this$static.zoomLevel - worldZoomPoint[0];\n  ty = zoomAboutY / this$static.zoomLevel - worldZoomPoint[1];\n  $moveWorldBLTo(this$static, -tx, -ty);\n}\n\nfunction Camera_0(){\n  this.projection = nCreateMat4();\n  nSetIdentity(this.projection);\n  this.view = nCreateMat4();\n  nSetIdentity(this.view);\n  this.zoomLevel = 1;\n}\n\ndefineSeed(3, 1, {}, Camera_0);\n_.screenHeightPx = 0;\n_.screenWidthPx = 0;\n_.zoomLevel = 0;\nfunction Circles_0(camera, shader, buffer){\n  this.camera = camera;\n  this.shader = shader;\n  this.buffer = buffer;\n  this.r = 0;\n  this.g = 0;\n  this.b = 1;\n  this.a = 1;\n}\n\ndefineSeed(4, 1, makeCastMap([Q$Drawable]), Circles_0);\n_.draw = function draw(){\n  $use(this.shader, this.r, this.g, this.b, this.a, this.camera);\n  $draw(this.shader, this.buffer);\n}\n;\n_.a = 0;\n_.b = 0;\n_.g = 0;\n_.r = 0;\nfunction $ensureOnGpu(this$static){\n  if (!this$static.isOnGpu) {\n    $glBufferData(this$static.gl, this$static.gl.gl.ARRAY_BUFFER, this$static.vertexBuffer, this$static.gl.gl.STATIC_DRAW);\n    this$static.isOnGpu = true;\n  }\n}\n\nfunction $validateFloatAlignment(this$static, numFloats){\n  if (numFloats % (this$static.vertexSizeFloats * this$static.vertsPerShape) != 0) {\n    throw new RuntimeException_1('Expected num floats to be divisible by ' + this$static.vertexSizeFloats * this$static.vertsPerShape + ' but was ' + numFloats);\n  }\n}\n\nfunction NativeShapeBuffer_0(gl, vertexSizeFloats, vertsPerShape, numShapes){\n  this.gl = gl;\n  this.numShapes = numShapes;\n  this.vertexSizeFloats = vertexSizeFloats;\n  this.vertsPerShape = vertsPerShape;\n  this.vertexBuffer = new WebNativeFloatBuffer_0(vertexSizeFloats * vertsPerShape * numShapes);\n  this.glBuffer = $addBuffer(gl.webGLObjects, gl.gl.createBuffer());\n  this.modelMatrix = nCreateMat4();\n  nSetIdentity(this.modelMatrix);\n}\n\ndefineSeed(6, 1, {});\n_.glBuffer = 0;\n_.isOnGpu = false;\n_.numShapes = 0;\n_.vertexSizeFloats = 0;\n_.vertsPerShape = 0;\nfunction CirclesBuffer_0(gl, numCircles){\n  NativeShapeBuffer_0.call(this, gl, 4, 6, numCircles);\n}\n\nfunction setCircle(buffer, circleIndex, centerX, centerY, radius){\n  var bottom, left, next, right, top_0;\n  next = circleIndex * 6 * 4;\n  top_0 = centerY + radius;\n  bottom = centerY - radius;\n  left = centerX - radius;\n  right = centerX + radius;\n  buffer[next++] = left;\n  buffer[next++] = top_0;\n  buffer[next++] = -1;\n  buffer[next++] = 1;\n  buffer[next++] = left;\n  buffer[next++] = bottom;\n  buffer[next++] = -1;\n  buffer[next++] = -1;\n  buffer[next++] = right;\n  buffer[next++] = bottom;\n  buffer[next++] = 1;\n  buffer[next++] = -1;\n  buffer[next++] = left;\n  buffer[next++] = top_0;\n  buffer[next++] = -1;\n  buffer[next++] = 1;\n  buffer[next++] = right;\n  buffer[next++] = bottom;\n  buffer[next++] = 1;\n  buffer[next++] = -1;\n  buffer[next++] = right;\n  buffer[next++] = top_0;\n  buffer[next++] = 1;\n  buffer[next++] = 1;\n}\n\ndefineSeed(5, 6, {}, CirclesBuffer_0);\nfunction $clinit_CirclesShader(){\n  $clinit_CirclesShader = nullMethod;\n  TAG = Lcom_github_rma350_kidneyx_core_CirclesShader_2_classLit.simpleName;\n}\n\nfunction $draw(this$static, points){\n  $glUniformMatrix4(this$static.gl, this$static.mModel, points.modelMatrix);\n  $glBindBuffer(points.gl, points.gl.gl.ARRAY_BUFFER, points.glBuffer);\n  $ensureOnGpu(points);\n  $glVertexAttribPointer(this$static.gl, this$static.mPosition, 16, 0);\n  $glVertexAttribPointer(this$static.gl, this$static.mCircleCoords, 16, 8);\n  $glDrawArrays(this$static.gl, this$static.gl.gl.TRIANGLES, points.numShapes * points.vertsPerShape);\n  $glBindBuffer(points.gl, points.gl.gl.ARRAY_BUFFER, 0);\n}\n\nfunction $use(this$static, r, g, b, a, camera){\n  $glUseProgram(this$static.gl, this$static.mProgram);\n  $glEnableVertexAttribArray(this$static.gl, this$static.mCircleCoords);\n  $glEnableVertexAttribArray(this$static.gl, this$static.mPosition);\n  $glUniform4f(this$static.gl, this$static.mColor, r, g, b, a);\n  $glUniformMatrix4(this$static.gl, this$static.mView, camera.view);\n  $glUniformMatrix4(this$static.gl, this$static.mProjection, camera.projection);\n}\n\nfunction CirclesShader_0(gl){\n  $clinit_CirclesShader();\n  this.gl = gl;\n  this.mProgram = createProgram(gl, 'uniform mat4 uModel;\\nuniform mat4 uView;\\nuniform mat4 uProjection;\\nattribute vec4 aPosition;\\nattribute vec2 aCircleCoords;\\nvarying vec2 vCircleCoords;\\nvoid main() {\\n  vCircleCoords = aCircleCoords;\\n  gl_Position = uProjection*uView*uModel*aPosition;\\n}\\n', 'precision mediump float;\\nuniform vec4 uColor;\\nvarying vec2 vCircleCoords;\\nvoid main() {\\n  if(vCircleCoords.x * vCircleCoords.x + vCircleCoords.y * vCircleCoords.y < 1.0 ) {\\n    gl_FragColor = uColor;\\n  } else {\\n    gl_FragColor = vec4(0,0,0,0);\\n  }\\n}\\n');\n  this.mCircleCoords = $glGetAttribLocation(gl, this.mProgram, 'aCircleCoords');\n  $d(TAG, 'Attribute circle coords: ' + this.mCircleCoords);\n  this.mPosition = $glGetAttribLocation(gl, this.mProgram, 'aPosition');\n  $d(TAG, 'Attribute Position: ' + this.mPosition);\n  this.mColor = $glGetUniformLocation(gl, this.mProgram, 'uColor');\n  $d(TAG, 'Uniform Color: ' + this.mColor);\n  this.mModel = $glGetUniformLocation(gl, this.mProgram, 'uModel');\n  this.mView = $glGetUniformLocation(gl, this.mProgram, 'uView');\n  this.mProjection = $glGetUniformLocation(gl, this.mProgram, 'uProjection');\n}\n\ndefineSeed(7, 1, {}, CirclesShader_0);\n_.mCircleCoords = 0;\n_.mColor = 0;\n_.mModel = 0;\n_.mPosition = 0;\n_.mProgram = 0;\n_.mProjection = 0;\n_.mView = 0;\nvar TAG;\nfunction $drawFrame(this$static){\n  $glClear(this$static.gl, this$static.gl.gl.COLOR_BUFFER_BIT);\n  $draw_1(this$static.scene);\n}\n\nfunction $onResize(this$static, width_0, height){\n  $glViewport(this$static.gl, width_0, height);\n  $setViewport(this$static.camera, width_0, height);\n}\n\nfunction $zoom_0(this$static, scaleFactor, screenCenterX, screenCenterY){\n  $zoom(this$static.camera, scaleFactor, screenCenterX, screenCenterY);\n}\n\nfunction Engine_0(gl){\n  this.gl = gl;\n  gl.gl.clearColor(1, 1, 1, 1);\n  $glEnable(gl, gl.gl.BLEND);\n  $glBlendFunc(gl, gl.gl.SRC_ALPHA, gl.gl.ONE_MINUS_SRC_ALPHA);\n  this.camera = new Camera_0(gl);\n  new PointsShader_0(gl);\n  this.circlesShader = new CirclesShader_0(gl);\n  this.linesShader = new LinesShader_0(gl);\n  this.scene = new Scene_0;\n}\n\ndefineSeed(8, 1, {}, Engine_0);\nfunction Lines_0(camera, shader, buffer){\n  this.camera = camera;\n  this.shader = shader;\n  this.buffer = buffer;\n  this.r = 1;\n  this.g = 0;\n  this.b = 0;\n  this.a = 1;\n  this.width_0 = 10;\n}\n\ndefineSeed(9, 1, makeCastMap([Q$Drawable]), Lines_0);\n_.draw = function draw_0(){\n  $use_0(this.shader, this.r, this.g, this.b, this.a, this.camera, this.width_0);\n  $draw_0(this.shader, this.buffer);\n}\n;\n_.a = 0;\n_.b = 0;\n_.g = 0;\n_.r = 0;\n_.width_0 = 0;\nfunction LinesBuffer_0(gl, numLines){\n  NativeShapeBuffer_0.call(this, gl, 2, 2, numLines);\n}\n\nfunction setLine(buffer, lineIndex, startX, startY, endX, endY){\n  var next;\n  next = lineIndex * 2 * 2;\n  buffer[next++] = startX;\n  buffer[next++] = startY;\n  buffer[next++] = endX;\n  buffer[next++] = endY;\n}\n\ndefineSeed(10, 6, {}, LinesBuffer_0);\nfunction $clinit_LinesShader(){\n  $clinit_LinesShader = nullMethod;\n  TAG_0 = Lcom_github_rma350_kidneyx_core_LinesShader_2_classLit.simpleName;\n}\n\nfunction $draw_0(this$static, lines){\n  $glUniformMatrix4(this$static.gl, this$static.mModel, lines.modelMatrix);\n  $glBindBuffer(lines.gl, lines.gl.gl.ARRAY_BUFFER, lines.glBuffer);\n  $ensureOnGpu(lines);\n  $glVertexAttribPointer(this$static.gl, this$static.mPosition, 8, 0);\n  $glDrawArrays(this$static.gl, this$static.gl.gl.LINES, lines.numShapes * lines.vertsPerShape);\n  $glBindBuffer(lines.gl, lines.gl.gl.ARRAY_BUFFER, 0);\n}\n\nfunction $use_0(this$static, r, g, b, a, camera, lineWidth){\n  var lineScreen, out, vec;\n  $glUseProgram(this$static.gl, this$static.mProgram);\n  $glEnableVertexAttribArray(this$static.gl, this$static.mPosition);\n  $glUniform4f(this$static.gl, this$static.mColor, r, g, b, a);\n  $glUniformMatrix4(this$static.gl, this$static.mView, camera.view);\n  $glUniformMatrix4(this$static.gl, this$static.mProjection, camera.projection);\n  vec = nCreateVec4((this$static.gl , lineWidth), 0, 0, 0);\n  out = nMult((this$static.gl , camera.view), vec);\n  lineScreen = out[0];\n  $glLineWidth(this$static.gl, lineScreen);\n}\n\nfunction LinesShader_0(gl){\n  $clinit_LinesShader();\n  this.gl = gl;\n  this.mProgram = createProgram(gl, 'uniform mat4 uModel;\\nuniform mat4 uView;\\nuniform mat4 uProjection;\\nattribute vec4 aPosition;\\nvoid main() {\\n  gl_Position = uProjection*uView*uModel*aPosition;\\n}\\n', 'precision mediump float;\\nuniform vec4 uColor;\\nvoid main() {\\n  gl_FragColor = uColor;\\n}\\n');\n  this.mPosition = $glGetAttribLocation(gl, this.mProgram, 'aPosition');\n  $d(TAG_0, 'Attribute Position: ' + this.mPosition);\n  this.mColor = $glGetUniformLocation(gl, this.mProgram, 'uColor');\n  $d(TAG_0, 'Uniform Color: ' + this.mColor);\n  this.mModel = $glGetUniformLocation(gl, this.mProgram, 'uModel');\n  this.mView = $glGetUniformLocation(gl, this.mProgram, 'uView');\n  this.mProjection = $glGetUniformLocation(gl, this.mProgram, 'uProjection');\n}\n\ndefineSeed(11, 1, {}, LinesShader_0);\n_.mColor = 0;\n_.mModel = 0;\n_.mPosition = 0;\n_.mProgram = 0;\n_.mProjection = 0;\n_.mView = 0;\nvar TAG_0;\nfunction $clinit_PointsShader(){\n  $clinit_PointsShader = nullMethod;\n  TAG_1 = Lcom_github_rma350_kidneyx_core_PointsShader_2_classLit.simpleName;\n}\n\nfunction PointsShader_0(gl){\n  $clinit_PointsShader();\n  this.mProgram = createProgram(gl, 'uniform mat4 uModel;\\nuniform mat4 uView;\\nuniform mat4 uProjection;\\nattribute vec4 aPosition;\\nattribute float aSize;\\nvoid main() {\\n  gl_PointSize = (uView* vec4(aSize, 0 , 0 , 0)).x;\\n  gl_Position = uProjection*uView*uModel*aPosition;\\n}\\n', 'precision mediump float;\\nuniform vec4 uColor;\\nvoid main() {\\n  gl_FragColor = uColor;\\n}\\n');\n  this.mSize = $glGetAttribLocation(gl, this.mProgram, 'aSize');\n  $d(TAG_1, 'Attribute size: ' + this.mSize);\n  this.mPosition = $glGetAttribLocation(gl, this.mProgram, 'aPosition');\n  $d(TAG_1, 'Attribute Position: ' + this.mPosition);\n  this.mColor = $glGetUniformLocation(gl, this.mProgram, 'uColor');\n  $d(TAG_1, 'Uniform Color: ' + this.mColor);\n  $glGetUniformLocation(gl, this.mProgram, 'uModel');\n  $glGetUniformLocation(gl, this.mProgram, 'uView');\n  $glGetUniformLocation(gl, this.mProgram, 'uProjection');\n}\n\ndefineSeed(12, 1, {}, PointsShader_0);\n_.mColor = 0;\n_.mPosition = 0;\n_.mProgram = 0;\n_.mSize = 0;\nvar TAG_1;\nfunction $addToScene(this$static, drawable){\n  $add_0(this$static.drawables, drawable);\n}\n\nfunction $draw_1(this$static){\n  var drawable, drawable$iterator;\n  for (drawable$iterator = new AbstractList$IteratorImpl_0(this$static.drawables); drawable$iterator.i < drawable$iterator.this$0.size_0;) {\n    drawable = dynamicCast($next(drawable$iterator), Q$Drawable);\n    drawable.draw();\n  }\n}\n\nfunction Scene_0(){\n  this.drawables = new ArrayList_0;\n}\n\ndefineSeed(13, 1, {}, Scene_0);\nfunction $clinit_SceneDemos(){\n  $clinit_SceneDemos = nullMethod;\n  TAG_2 = Lcom_github_rma350_kidneyx_core_SceneDemos_2_classLit.simpleName;\n}\n\nfunction makeGraph(engine){\n  $clinit_SceneDemos();\n  var circleBuffer, circles, circs, dest, dest$iterator, edgeCount, graph, i, lineBuffer, lineData, lines, nextEdge, ni, numCircles, src_0, src$iterator;\n  graph = makeRandomGraph();\n  edgeCount = $edgeCount(graph);\n  lineData = new LinesBuffer_0(engine.gl, edgeCount);\n  lineBuffer = initDim(_3F_classLit, makeCastMap([Q$Serializable]), -1, edgeCount * 2 * 2, 1);\n  nextEdge = 0;\n  for (src$iterator = new AbstractList$IteratorImpl_0(graph.nodes); src$iterator.i < src$iterator.this$0.size_0;) {\n    src_0 = dynamicCast($next(src$iterator), Q$SceneDemos$Node);\n    for (dest$iterator = dynamicCast($get(graph.edges, src_0), Q$List).iterator(); dest$iterator.hasNext();) {\n      dest = dynamicCast(dest$iterator.next(), Q$SceneDemos$Node);\n      setLine(lineBuffer, nextEdge, src_0.x_0, src_0.y_0, dest.x_0, dest.y_0);\n      ++nextEdge;\n    }\n  }\n  $d(TAG_2, 'Graph has ' + graph.nodes.size_0 + ' nodes and ' + edgeCount + ' edges.');\n  if (edgeCount != nextEdge) {\n    throw new RuntimeException_1('Expected : ' + edgeCount + ' edges but found: ' + nextEdge);\n  }\n  $validateFloatAlignment(lineData, lineBuffer.length);\n  $putAll(lineData.vertexBuffer, lineBuffer);\n  lines = new Lines_0(engine.camera, engine.linesShader, lineData);\n  $addToScene(engine.scene, lines);\n  numCircles = graph.nodes.size_0;\n  circles = new CirclesBuffer_0(engine.gl, numCircles);\n  circleBuffer = initDim(_3F_classLit, makeCastMap([Q$Serializable]), -1, numCircles * 6 * 4, 1);\n  for (i = 0; i < numCircles; i++) {\n    ni = dynamicCast($get_0(graph.nodes, i), Q$SceneDemos$Node);\n    setCircle(circleBuffer, i, ni.x_0, ni.y_0, ni.r);\n  }\n  $validateFloatAlignment(circles, circleBuffer.length);\n  $putAll(circles.vertexBuffer, circleBuffer);\n  circs = new Circles_0(engine.camera, engine.circlesShader, circles);\n  $addToScene(engine.scene, circs);\n}\n\nfunction makeRandomGraph(){\n  var graph, i, i0, j, ni, nj, node;\n  graph = new SceneDemos$Graph_0;\n  for (i = 0; i < 5000; i++) {\n    node = new SceneDemos$Node_0;\n    node.x_0 = random() * 5000;\n    node.y_0 = random() * 5000;\n    node.r = 10;\n    $add_0(graph.nodes, node);\n    $put(graph.edges, node, new ArrayList_0);\n  }\n  for (i0 = 0; i0 < 5000; i0++) {\n    ni = dynamicCast($get_0(graph.nodes, i0), Q$SceneDemos$Node);\n    for (j = i0 + 1; j < 5000; j++) {\n      nj = dynamicCast($get_0(graph.nodes, j), Q$SceneDemos$Node);\n      (ni.x_0 - nj.x_0) * (ni.x_0 - nj.x_0) + (ni.y_0 - nj.y_0) * (ni.y_0 - nj.y_0) < 6400 && dynamicCast($get(graph.edges, ni), Q$List).add_0(nj);\n    }\n  }\n  return graph;\n}\n\nvar TAG_2;\nfunction $edgeCount(this$static){\n  var ans, target, target$iterator;\n  ans = 0;\n  for (target$iterator = $iterator($values(this$static.edges)); $hasNext(target$iterator.val$outerIter.iter);) {\n    target = dynamicCast($next_0(target$iterator), Q$List);\n    ans += target.size_1();\n  }\n  return ans;\n}\n\nfunction SceneDemos$Graph_0(){\n  this.nodes = new ArrayList_0;\n  this.edges = new HashMap_0;\n}\n\ndefineSeed(15, 1, {}, SceneDemos$Graph_0);\nfunction SceneDemos$Node_0(){\n}\n\ndefineSeed(16, 1, makeCastMap([Q$SceneDemos$Node]), SceneDemos$Node_0);\n_.r = 0;\n_.x_0 = 0;\n_.y_0 = 0;\nfunction $clinit_ShaderUtil(){\n  $clinit_ShaderUtil = nullMethod;\n  TAG_3 = Lcom_github_rma350_kidneyx_core_ShaderUtil_2_classLit.simpleName;\n}\n\nfunction createProgram(gl, vertexShader, fragmentShader){\n  var program;\n  $clinit_ShaderUtil();\n  var fragmentProgram, linkStatus, programLog, shaderProgram, validationStatus, vertexProgram;\n  vertexProgram = loadShader(gl, gl.gl.VERTEX_SHADER, vertexShader);\n  fragmentProgram = loadShader(gl, gl.gl.FRAGMENT_SHADER, fragmentShader);\n  shaderProgram = (program = gl.gl.createProgram() , $addProgram(gl.webGLObjects, program));\n  glAttachShader(gl.gl, $getProgram(gl.webGLObjects, shaderProgram), $getShader(gl.webGLObjects, vertexProgram));\n  glAttachShader(gl.gl, $getProgram(gl.webGLObjects, shaderProgram), $getShader(gl.webGLObjects, fragmentProgram));\n  glLinkProgram(gl.gl, $getProgram(gl.webGLObjects, shaderProgram));\n  linkStatus = initDim(_3I_classLit, makeCastMap([Q$Serializable]), -1, 1, 1);\n  $glGetProgramiv(gl, shaderProgram, gl.gl.LINK_STATUS, linkStatus);\n  if (linkStatus[0] == 0) {\n    $e(TAG_3, 'Program link failed');\n    $e(TAG_3, 'Vertex code:\\n' + vertexShader);\n    $e(TAG_3, 'Fragment code:\\n' + fragmentShader);\n    programLog = glProgramInfoLog(gl.gl, $getProgram(gl.webGLObjects, shaderProgram));\n    $e(TAG_3, programLog);\n    throw new RuntimeException_1(programLog);\n  }\n  glValidateProgram(gl.gl, $getProgram(gl.webGLObjects, shaderProgram));\n  validationStatus = initDim(_3I_classLit, makeCastMap([Q$Serializable]), -1, 1, 1);\n  $glGetProgramiv(gl, shaderProgram, gl.gl.VALIDATE_STATUS, validationStatus);\n  if (validationStatus[0] == 0) {\n    $e(TAG_3, 'Program not valid');\n    $e(TAG_3, 'Vertex code:\\n' + vertexShader);\n    $e(TAG_3, 'Fragment code:\\n' + fragmentShader);\n    programLog = glProgramInfoLog(gl.gl, $getProgram(gl.webGLObjects, shaderProgram));\n    $e(TAG_3, programLog);\n    throw new RuntimeException_1(programLog);\n  }\n  glUseProgram(gl.gl, $getProgram(gl.webGLObjects, shaderProgram));\n  return shaderProgram;\n}\n\nfunction loadShader(gl, type_0, shaderCode){\n  var shader, shaderLog, status_0, shader_0;\n  shader = (shader_0 = glCreateShader(gl.gl, type_0) , $addShader(gl.webGLObjects, shader_0));\n  glShaderSource(gl.gl, $getShader(gl.webGLObjects, shader), shaderCode);\n  glCompileShader(gl.gl, $getShader(gl.webGLObjects, shader));\n  status_0 = initDim(_3I_classLit, makeCastMap([Q$Serializable]), -1, 1, 1);\n  $glGetShaderiv(gl, shader, gl.gl.COMPILE_STATUS, status_0);\n  if (status_0[0] == 0) {\n    $e(TAG_3, 'Compile failed');\n    $e(TAG_3, 'Shader code:\\n' + shaderCode);\n    shaderLog = glShaderInfoLog(gl.gl, $getShader(gl.webGLObjects, shader));\n    $e(TAG_3, shaderLog);\n    throw new RuntimeException_1(shaderLog);\n  }\n  return shader;\n}\n\nvar TAG_3;\nfunction $d(tag, message){\n  $log_1(($clinit_Logger() , $getLoggerHelper(tag)), ($clinit_Level() , INFO), message);\n}\n\nfunction $e(tag, message){\n  $log_1(($clinit_Logger() , $getLoggerHelper(tag)), ($clinit_Level() , SEVERE), message);\n}\n\nfunction $clinit_KidneyXWeb(){\n  $clinit_KidneyXWeb = nullMethod;\n  TAG_4 = Lcom_github_rma350_kidneyx_web_client_KidneyXWeb_2_classLit.simpleName;\n}\n\nfunction $publish(this$static){\n  var that = this$static;\n  $wnd.jSetupGL = $entry(function(){\n    that.setupGL();\n  }\n  );\n  $wnd.jDrawScene = $entry(function(){\n    that.drawScene();\n  }\n  );\n  $wnd.jUpdate = $entry(function(){\n    that.update();\n  }\n  );\n  $wnd.jOnClick = $entry(function(x_0, y_0){\n    that.onClick(x_0, y_0);\n  }\n  );\n  $wnd.jOnMouseWheel = $entry(function(x_0, y_0, d){\n    that.onMouseWheel(x_0, y_0, d);\n  }\n  );\n}\n\nfunction KidneyXWeb_0(){\n  $clinit_KidneyXWeb();\n}\n\ndefineSeed(19, 1, {}, KidneyXWeb_0);\n_.drawScene = function drawScene(){\n  $drawFrame(this.engine);\n}\n;\n_.onClick = function onClick(screenX_0, screenY_0){\n  $d(TAG_4, 'Got input at: ' + screenX_0 + ', ' + screenY_0);\n  $moveTo(this.engine.camera, screenX_0, this.canvasHeight - screenY_0);\n}\n;\n_.onMouseWheel = function onMouseWheel(screenX_0, screenY_0, delta){\n  var zoom;\n  $d(TAG_4, 'Got input at: ' + screenX_0 + ', ' + screenY_0 + ' delta ' + delta);\n  zoom = 1;\n  delta > 0?(zoom = 1.25):delta < 0 && (zoom = 0.800000011920929);\n  $zoom_0(this.engine, zoom, screenX_0, this.canvasHeight - screenY_0);\n}\n;\n_.setupGL = function setupGL(){\n  var webGL;\n  webGL = new WebGL_0;\n  this.gl = webGL;\n  this.canvasWidth = getCanvasWidth(webGL.canvasElementId);\n  this.canvasHeight = getCanvasHeight(webGL.canvasElementId);\n  this.engine = new Engine_0(this.gl);\n  $onResize(this.engine, this.canvasWidth, this.canvasHeight);\n  makeGraph(this.engine);\n}\n;\n_.update = function update(){\n}\n;\n_.canvasHeight = 0;\n_.canvasWidth = 0;\nvar TAG_4;\nfunction $glBindBuffer(this$static, target, buffer){\n  glBindBuffer(this$static.gl, target, $getBuffer(this$static.webGLObjects, buffer));\n}\n\nfunction $glBlendFunc(this$static, sfactor, dfactor){\n  glBlendFunc(this$static.gl, sfactor, dfactor);\n}\n\nfunction $glBufferData(this$static, target, nativeBuffer, usage){\n  glBufferData(this$static.gl, target, nativeBuffer.nativeArray, usage);\n}\n\nfunction $glClear(this$static, mask){\n  glClear(this$static.gl, mask);\n}\n\nfunction $glDrawArrays(this$static, mode, count){\n  glDrawArrays(this$static.gl, mode, 0, count);\n}\n\nfunction $glEnable(this$static, cap){\n  glEnable(this$static.gl, cap);\n}\n\nfunction $glEnableVertexAttribArray(this$static, glLocation){\n  glEnableVertexAttribArray(this$static.gl, glLocation);\n}\n\nfunction $glGetAttribLocation(this$static, program, attribute){\n  return glGetAttribLocation(this$static.gl, $getProgram(this$static.webGLObjects, program), attribute);\n}\n\nfunction $glGetProgramiv(this$static, program, pname, params){\n  params[0] = glProgramParameter(this$static.gl, $getProgram(this$static.webGLObjects, program), pname);\n}\n\nfunction $glGetShaderiv(this$static, shader, pname, params){\n  params[0] = glShaderParameter(this$static.gl, $getShader(this$static.webGLObjects, shader), pname);\n}\n\nfunction $glGetUniformLocation(this$static, program, uniform){\n  return $addUniformLocation(this$static.webGLObjects, glGetUniformLocation(this$static.gl, $getProgram(this$static.webGLObjects, program), uniform));\n}\n\nfunction $glLineWidth(this$static, width_0){\n  glLineWidth(this$static.gl, width_0);\n}\n\nfunction $glUniform4f(this$static, glLocation, x_0, y_0, z_0, w){\n  glUniform4f(this$static.gl, $getUniformLocation(this$static.webGLObjects, glLocation), x_0, y_0, z_0, w);\n}\n\nfunction $glUniformMatrix4(this$static, glLocation, mat){\n  var uniform;\n  uniform = $getUniformLocation(this$static.webGLObjects, glLocation);\n  glUniformMatrix4fv(this$static.gl, uniform, mat);\n}\n\nfunction $glUseProgram(this$static, program){\n  glUseProgram(this$static.gl, $getProgram(this$static.webGLObjects, program));\n}\n\nfunction $glVertexAttribPointer(this$static, glLocation, stride, offset){\n  glVertexAttribPointer(this$static.gl, glLocation, 2, false, stride, offset);\n}\n\nfunction $glViewport(this$static, width_0, height){\n  glViewport(this$static.gl, 0, 0, width_0, height);\n}\n\nfunction WebGL_0(){\n  this.gl = glContext('graph-canvas', true);\n  this.canvasElementId = 'graph-canvas';\n  this.webGLObjects = new WebGLObjects_0;\n}\n\nfunction getCanvasHeight(canvasElementId){\n  var canvas = $doc.getElementById(canvasElementId);\n  return canvas.height;\n}\n\nfunction getCanvasWidth(canvasElementId){\n  var canvas = $doc.getElementById(canvasElementId);\n  return canvas.width;\n}\n\nfunction glAttachShader(gl, program, shader){\n  gl.attachShader(program, shader);\n}\n\nfunction glBindBuffer(gl, target, buffer){\n  gl.bindBuffer(target, buffer);\n}\n\nfunction glBlendFunc(gl, sfactor, dfactor){\n  gl.blendFunc(sfactor, dfactor);\n}\n\nfunction glBufferData(gl, target, nativeArray, usage){\n  gl.bufferData(target, nativeArray, usage);\n}\n\nfunction glClear(gl, mask){\n  gl.clear(mask);\n}\n\nfunction glCompileShader(gl, shaderProgram){\n  gl.compileShader(shaderProgram);\n}\n\nfunction glContext(canvasElementId, debugMode){\n  try {\n    var canvas = $doc.getElementById(canvasElementId);\n    var ctx = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n    try {\n      debugMode && $wnd.WebGLDebugUtils.init(ctx);\n    }\n     catch (e) {\n      alert('Warning: Could not initialise debug for WebGL.');\n    }\n    return ctx;\n  }\n   catch (e) {\n    alert('Could not initialise WebGL, sorry :-(');\n    return null;\n  }\n}\n\nfunction glCreateShader(gl, shaderType){\n  return gl.createShader(shaderType);\n}\n\nfunction glDrawArrays(gl, mode, first, count){\n  gl.drawArrays(mode, first, count);\n}\n\nfunction glEnable(gl, cap){\n  gl.enable(cap);\n}\n\nfunction glEnableVertexAttribArray(gl, glLocation){\n  gl.enableVertexAttribArray(glLocation);\n}\n\nfunction glGetAttribLocation(gl, program, attribute){\n  return gl.getAttribLocation(program, attribute);\n}\n\nfunction glGetUniformLocation(gl, program, uniform){\n  return gl.getUniformLocation(program, uniform);\n}\n\nfunction glLineWidth(gl, width_0){\n  gl.lineWidth(width_0);\n}\n\nfunction glLinkProgram(gl, program){\n  gl.linkProgram(program);\n}\n\nfunction glProgramInfoLog(gl, program){\n  return gl.getProgramInfoLog(program);\n}\n\nfunction glProgramParameter(gl, program, pname){\n  return gl.getProgramParameter(program, pname);\n}\n\nfunction glShaderInfoLog(gl, shader){\n  return gl.getShaderInfoLog(shader);\n}\n\nfunction glShaderParameter(gl, shaderProgram, pname){\n  return gl.getShaderParameter(shaderProgram, pname);\n}\n\nfunction glShaderSource(gl, shaderProgram, shaderCode){\n  gl.shaderSource(shaderProgram, shaderCode);\n}\n\nfunction glUniform4f(gl, glLocation, x_0, y_0, z_0, w){\n  gl.uniform4f(glLocation, x_0, y_0, z_0, w);\n}\n\nfunction glUniformMatrix4fv(gl, uniform, mat){\n  gl.uniformMatrix4fv(uniform, false, mat);\n}\n\nfunction glUseProgram(gl, program){\n  gl.useProgram(program);\n}\n\nfunction glValidateProgram(gl, program){\n  gl.validateProgram(program);\n}\n\nfunction glVertexAttribPointer(gl, glLocation, size_0, normalized, stride, offset){\n  gl.vertexAttribPointer(glLocation, size_0, gl.FLOAT, normalized, stride, offset);\n}\n\nfunction glViewport(gl, x_0, y_0, width_0, height){\n  gl.viewport(x_0, y_0, width_0, height);\n}\n\ndefineSeed(20, 1, {}, WebGL_0);\nfunction $clinit_WebGLObjects(){\n  $clinit_WebGLObjects = nullMethod;\n  logger_0 = ($clinit_Logger() , $getLoggerHelper(Lcom_github_rma350_kidneyx_web_client_coredeps_WebGLObjects_2_classLit.simpleName));\n}\n\nfunction $addBuffer(this$static, buffer){\n  $add_0(this$static.buffers, buffer);\n  checkSize(this$static.objects, Lcom_google_gwt_core_client_JavaScriptObject_2_classLit.simpleName);\n  return this$static.buffers.size_0 - 1;\n}\n\nfunction $addProgram(this$static, program){\n  $add_0(this$static.programs, program);\n  checkSize(this$static.objects, Lcom_google_gwt_core_client_JavaScriptObject_2_classLit.simpleName);\n  return this$static.programs.size_0 - 1;\n}\n\nfunction $addShader(this$static, shader){\n  $add_0(this$static.shaders, shader);\n  checkSize(this$static.objects, Lcom_google_gwt_core_client_JavaScriptObject_2_classLit.simpleName);\n  return this$static.shaders.size_0 - 1;\n}\n\nfunction $addUniformLocation(this$static, uniformLocation){\n  $add_0(this$static.uniformLocations, uniformLocation);\n  checkSize(this$static.objects, Lcom_google_gwt_core_client_JavaScriptObject_2_classLit.simpleName);\n  return this$static.uniformLocations.size_0 - 1;\n}\n\nfunction $getBuffer(this$static, index_0){\n  return dynamicCastJso($get_0(this$static.buffers, index_0));\n}\n\nfunction $getProgram(this$static, index_0){\n  return dynamicCastJso($get_0(this$static.programs, index_0));\n}\n\nfunction $getShader(this$static, index_0){\n  return dynamicCastJso($get_0(this$static.shaders, index_0));\n}\n\nfunction $getUniformLocation(this$static, index_0){\n  return dynamicCastJso($get_0(this$static.uniformLocations, index_0));\n}\n\nfunction WebGLObjects_0(){\n  $clinit_WebGLObjects();\n  this.objects = new ArrayList_0;\n  this.buffers = new ArrayList_0;\n  new ArrayList_0;\n  this.programs = new ArrayList_0;\n  new ArrayList_0;\n  this.shaders = new ArrayList_0;\n  new ArrayList_0;\n  this.uniformLocations = new ArrayList_0;\n}\n\nfunction checkSize(list, className){\n  list.size_0 > 500 && $log_1(logger_0, ($clinit_Level() , WARNING), 'Created ' + list.size_0 + ' unique ' + className + \", you probably don't want to do this.\");\n}\n\ndefineSeed(21, 1, {}, WebGLObjects_0);\nvar logger_0;\n",
"function equals__devirtual$(this$static, other){\n  var maybeJsoInvocation;\n  return maybeJsoInvocation = this$static , isJavaObject(maybeJsoInvocation)?maybeJsoInvocation.equals$(other):maybeJsoInvocation === other;\n}\n\nfunction hashCode__devirtual$(this$static){\n  var maybeJsoInvocation;\n  return maybeJsoInvocation = this$static , isJavaObject(maybeJsoInvocation)?maybeJsoInvocation.hashCode$():getHashCode(maybeJsoInvocation);\n}\n\nfunction nCreateMat4(){\n  return $wnd.mat4.create();\n}\n\nfunction nCreateVec4(x_0, y_0, z_0, w){\n  var ans = $wnd.vec4.create();\n  ans[0] = x_0;\n  ans[1] = y_0;\n  ans[2] = z_0;\n  ans[3] = w;\n  return ans;\n}\n\nfunction nInvert(mat){\n  var ans = $wnd.mat4.create();\n  $wnd.mat4.invert(ans, mat);\n  return ans;\n}\n\nfunction nMult(mat, vec){\n  var ans = $wnd.vec4.create();\n  $wnd.vec4.transformMat4(ans, vec, mat);\n  return ans;\n}\n\nfunction nScale(mat, scaleX, scaleY){\n  $wnd.mat4.scale(mat, mat, [scaleX, scaleY, 1]);\n}\n\nfunction nSetIdentity(mat){\n  $wnd.mat4.identity(mat);\n}\n\nfunction nSetOrtho2D(mat, left, right, bottom, top_0){\n  $wnd.mat4.ortho(mat, left, right, bottom, top_0, -1, 1);\n}\n\nfunction nTranslate(mat, dX, dY){\n  $wnd.mat4.translate(mat, mat, [dX, dY, 0]);\n}\n\nfunction $putAll(this$static, values){\n  $set(this$static.nativeArray, values, 0);\n}\n\nfunction WebNativeFloatBuffer_0(sizeInFloats){\n  this.nativeArray = new Float32Array(sizeInFloats);\n}\n\ndefineSeed(29, 1, {}, WebNativeFloatBuffer_0);\nfunction setUncaughtExceptionHandler(handler){\n  uncaughtExceptionHandler = handler;\n}\n\nvar uncaughtExceptionHandler = null;\nfunction $getStackTrace(this$static){\n  if (this$static.stackTrace == null) {\n    return initDim(_3Ljava_lang_StackTraceElement_2_classLit, makeCastMap([Q$Serializable]), Q$StackTraceElement, 0, 0);\n  }\n  return this$static.stackTrace;\n}\n\nfunction $initCause(this$static, cause){\n  if (this$static.cause) {\n    throw new IllegalStateException_0;\n  }\n  if (cause == this$static) {\n    throw new IllegalArgumentException_0('Self-causation not permitted');\n  }\n  this$static.cause = cause;\n  return this$static;\n}\n\nfunction $printStackTrace(this$static, out){\n  var element, element$array, element$index, element$max, t;\n  for (t = this$static; t; t = t.cause) {\n    t != this$static && out.append('Caused by: ');\n    out.append('' + t);\n    out.newLine();\n    for (element$array = $getStackTrace(t) , element$index = 0 , element$max = element$array.length; element$index < element$max; ++element$index) {\n      element = element$array[element$index];\n      out.append('\\tat ' + element);\n      out.newLine();\n    }\n  }\n}\n\nfunction $setStackTrace(this$static, stackTrace){\n  var c, copy, i;\n  copy = initDim(_3Ljava_lang_StackTraceElement_2_classLit, makeCastMap([Q$Serializable]), Q$StackTraceElement, stackTrace.length, 0);\n  for (i = 0 , c = stackTrace.length; i < c; ++i) {\n    if (!stackTrace[i]) {\n      throw new NullPointerException_0;\n    }\n    copy[i] = stackTrace[i];\n  }\n  this$static.stackTrace = copy;\n}\n\nfunction Throwable_0(message){\n  this.detailMessage = message;\n  this.fillInStackTrace();\n}\n\ndefineSeed(36, 1, makeCastMap([Q$Serializable, Q$Throwable]));\n_.fillInStackTrace = function fillInStackTrace(){\n  $fillInStackTrace(this);\n  return this;\n}\n;\n_.getMessage = function getMessage(){\n  return this.detailMessage;\n}\n;\n_.toString$ = function toString_1(){\n  var className, msg;\n  className = this.___clazz$.typeName;\n  msg = this.getMessage();\n  return msg != null?className + ': ' + msg:className;\n}\n;\ndefineSeed(35, 36, makeCastMap([Q$Serializable, Q$Throwable]));\nfunction RuntimeException_0(){\n  this.fillInStackTrace();\n}\n\nfunction RuntimeException_1(message){\n  Throwable_0.call(this, message);\n}\n\ndefineSeed(34, 35, makeCastMap([Q$Serializable, Q$Throwable]), RuntimeException_1);\nfunction $clinit_JavaScriptException(){\n  $clinit_JavaScriptException = nullMethod;\n  NOT_SET = new Object_1;\n}\n\nfunction $ensureInit(this$static){\n  var exception, maybeJsoInvocation;\n  if (this$static.message_0 == null) {\n    exception = this$static.e === NOT_SET?null:this$static.e;\n    this$static.name_0 = exception == null?'null':instanceOfJso(exception)?getExceptionName0(dynamicCastJso(exception)):instanceOf(exception, Q$String)?'String':(maybeJsoInvocation = exception , isJavaObject(maybeJsoInvocation)?maybeJsoInvocation.___clazz$:Lcom_google_gwt_core_client_JavaScriptObject_2_classLit).typeName;\n    this$static.description = this$static.description + ': ' + (instanceOfJso(exception)?getExceptionDescription0(dynamicCastJso(exception)):exception + '');\n    this$static.message_0 = '(' + this$static.name_0 + ') ' + (instanceOfJso(exception)?$getProperties(dynamicCastJso(exception)):'') + this$static.description;\n  }\n}\n\nfunction JavaScriptException_0(e){\n  $clinit_JavaScriptException();\n  RuntimeException_0.call(this);\n  this.description = '';\n  this.e = e;\n  this.description = '';\n  $createStackTrace(this);\n}\n\nfunction getExceptionDescription0(e){\n  return e == null?null:e.message;\n}\n\nfunction getExceptionName0(e){\n  return e == null?null:e.name;\n}\n\ndefineSeed(33, 34, makeCastMap([Q$JavaScriptException, Q$Serializable, Q$Throwable]), JavaScriptException_0);\n_.getMessage = function getMessage_0(){\n  $ensureInit(this);\n  return this.message_0;\n}\n;\n_.getThrown = function getThrown(){\n  return this.e === NOT_SET?null:this.e;\n}\n;\nvar NOT_SET;\nfunction create(milliseconds){\n  return new Date(milliseconds);\n}\n\ndefineSeed(41, 1, {});\nfunction apply_0(jsFunction, thisObj, args){\n  return jsFunction.apply(thisObj, args);\n  var __0;\n}\n\nfunction dispose(d){\n}\n\nfunction enter(){\n  var now_0;\n  if (entryDepth != 0) {\n    now_0 = (new Date).getTime();\n    if (now_0 - watchdogEntryDepthLastScheduled > 2000) {\n      watchdogEntryDepthLastScheduled = now_0;\n      watchdogEntryDepthTimerId = watchdogEntryDepthSchedule();\n    }\n  }\n  if (entryDepth++ == 0) {\n    $flushEntryCommands(($clinit_SchedulerImpl() , INSTANCE));\n    return true;\n  }\n  return false;\n}\n\nfunction entry_0(jsFunction){\n  return function(){\n    try {\n      return entry0(jsFunction, this, arguments);\n    }\n     catch (e) {\n      throw e;\n    }\n  }\n  ;\n}\n\nfunction entry0(jsFunction, thisObj, args){\n  var initialEntry, t;\n  initialEntry = enter();\n  try {\n    if (uncaughtExceptionHandler) {\n      try {\n        return apply_0(jsFunction, thisObj, args);\n      }\n       catch ($e0) {\n        $e0 = wrap($e0);\n        if (instanceOf($e0, Q$Throwable)) {\n          t = $e0;\n          reportUncaughtException(t);\n          return undefined;\n        }\n         else \n          throw unwrap($e0);\n      }\n    }\n     else {\n      return apply_0(jsFunction, thisObj, args);\n    }\n  }\n   finally {\n    exit(initialEntry);\n  }\n}\n\nfunction exit(initialEntry){\n  initialEntry && $flushFinallyCommands(($clinit_SchedulerImpl() , INSTANCE));\n  --entryDepth;\n  if (initialEntry) {\n    if (watchdogEntryDepthTimerId != -1) {\n      watchdogEntryDepthCancel(watchdogEntryDepthTimerId);\n      watchdogEntryDepthTimerId = -1;\n    }\n  }\n}\n\nfunction getHashCode(o){\n  return o.$H || (o.$H = ++sNextHashId);\n}\n\nfunction registerEntry(){\n  return entry_0;\n}\n\nfunction reportToBrowser(e){\n  $wnd.setTimeout(function(){\n    throw e;\n  }\n  , 0);\n}\n\nfunction reportUncaughtException(e){\n  var handler;\n  handler = uncaughtExceptionHandler;\n  if (handler) {\n    if (handler == uncaughtExceptionHandlerForTest) {\n      return;\n    }\n    $log_2(handler.val$log, ($clinit_Level() , SEVERE), e.getMessage(), e);\n    return;\n  }\n  reportToBrowser(instanceOf(e, Q$JavaScriptException)?dynamicCast(e, Q$JavaScriptException).getThrown():e);\n}\n\nfunction setTimeout_0(func, time){\n  return setTimeout0(func, time, null);\n}\n\nfunction watchdogEntryDepthCancel(timerId){\n  $wnd.clearTimeout(timerId);\n}\n\nfunction watchdogEntryDepthSchedule(){\n  return setTimeout_0(function(){\n    entryDepth != 0 && (entryDepth = 0);\n    watchdogEntryDepthTimerId = -1;\n  }\n  , 10);\n}\n\nvar entryDepth = 0, sNextHashId = 0, uncaughtExceptionHandlerForTest, watchdogEntryDepthLastScheduled = 0, watchdogEntryDepthTimerId = -1;\nfunction $clinit_SchedulerImpl(){\n  $clinit_SchedulerImpl = nullMethod;\n  INSTANCE = new SchedulerImpl_0;\n}\n\nfunction $flushEntryCommands(this$static){\n  var oldQueue, rescheduled;\n  if (this$static.entryCommands) {\n    rescheduled = null;\n    do {\n      oldQueue = this$static.entryCommands;\n      this$static.entryCommands = null;\n      rescheduled = runScheduledTasks(oldQueue, rescheduled);\n    }\n     while (this$static.entryCommands);\n    this$static.entryCommands = rescheduled;\n  }\n}\n\nfunction $flushFinallyCommands(this$static){\n  var oldQueue, rescheduled;\n  if (this$static.finallyCommands) {\n    rescheduled = null;\n    do {\n      oldQueue = this$static.finallyCommands;\n      this$static.finallyCommands = null;\n      rescheduled = runScheduledTasks(oldQueue, rescheduled);\n    }\n     while (this$static.finallyCommands);\n    this$static.finallyCommands = rescheduled;\n  }\n}\n\nfunction SchedulerImpl_0(){\n}\n\nfunction push_0(queue, task){\n  !queue && (queue = []);\n  queue[queue.length] = task;\n  return queue;\n}\n\nfunction runScheduledTasks(tasks, rescheduled){\n  var e, i, j, t;\n  for (i = 0 , j = tasks.length; i < j; i++) {\n    t = tasks[i];\n    try {\n      t[1]?t[0].nullMethod() && (rescheduled = push_0(rescheduled, t)):t[0].nullMethod();\n    }\n     catch ($e0) {\n      $e0 = wrap($e0);\n      if (instanceOf($e0, Q$Throwable)) {\n        e = $e0;\n        reportUncaughtException(e);\n      }\n       else \n        throw unwrap($e0);\n    }\n  }\n  return rescheduled;\n}\n\ndefineSeed(43, 41, {}, SchedulerImpl_0);\nvar INSTANCE;\nfunction extractNameFromToString(fnToString){\n  var index_0, start_0, toReturn;\n  toReturn = '';\n  fnToString = $trim(fnToString);\n  index_0 = fnToString.indexOf('(');\n  start_0 = fnToString.indexOf('function') == 0?8:0;\n  if (index_0 == -1) {\n    index_0 = $indexOf(fnToString, fromCodePoint(64));\n    start_0 = fnToString.indexOf('function ') == 0?9:0;\n  }\n  index_0 != -1 && (toReturn = $trim($substring_0(fnToString, start_0, index_0)));\n  return toReturn.length > 0?toReturn:'anonymous';\n}\n\nfunction $collect(this$static){\n  var seen = {};\n  var toReturn = [];\n  var callee = arguments.callee.caller.caller;\n  while (callee) {\n    var name_0 = this$static.extractName(callee.toString());\n    toReturn.push(name_0);\n    var keyName = ':' + name_0;\n    var withThisName = seen[keyName];\n    if (withThisName) {\n      var i, j;\n      for (i = 0 , j = withThisName.length; i < j; i++) {\n        if (withThisName[i] === callee) {\n          return toReturn;\n        }\n      }\n    }\n    (withThisName || (seen[keyName] = [])).push(callee);\n    callee = callee.caller;\n  }\n  return toReturn;\n}\n\nfunction $createStackTrace(e){\n  var i, j, stack_0, stackTrace;\n  stack_0 = [];\n  stackTrace = initDim(_3Ljava_lang_StackTraceElement_2_classLit, makeCastMap([Q$Serializable]), Q$StackTraceElement, stack_0.length, 0);\n  for (i = 0 , j = stackTrace.length; i < j; i++) {\n    stackTrace[i] = new StackTraceElement_0(stack_0[i]);\n  }\n  $setStackTrace(e, stackTrace);\n}\n\nfunction $fillInStackTrace(t){\n  var i, j, stack_0, stackTrace;\n  stack_0 = $collect(new StackTraceCreator$Collector_0);\n  stackTrace = initDim(_3Ljava_lang_StackTraceElement_2_classLit, makeCastMap([Q$Serializable]), Q$StackTraceElement, stack_0.length, 0);\n  for (i = 0 , j = stackTrace.length; i < j; i++) {\n    stackTrace[i] = new StackTraceElement_0(stack_0[i]);\n  }\n  $setStackTrace(t, stackTrace);\n}\n\nfunction $getProperties(e){\n  var result = '';\n  try {\n    for (var prop in e) {\n      if (prop != 'name' && prop != 'message' && prop != 'toString') {\n        try {\n          var propValue = prop != '__gwt$exception'?e[prop]:'<skipped>';\n          result += '\\n ' + prop + ': ' + propValue;\n        }\n         catch (ignored) {\n        }\n      }\n    }\n  }\n   catch (ignored) {\n  }\n  return result;\n}\n\nfunction StackTraceCreator$Collector_0(){\n}\n\ndefineSeed(46, 1, {}, StackTraceCreator$Collector_0);\n_.extractName = function extractName(fnToString){\n  return extractNameFromToString(fnToString);\n}\n;\ndefineSeed(47, 1, {});\nfunction $append(this$static, x_0){\n  this$static.string += x_0;\n}\n\nfunction StringBufferImplAppend_0(){\n}\n\ndefineSeed(48, 47, {}, StringBufferImplAppend_0);\n_.string = '';\nfunction setTimeout0(func, time, disposeable){\n  var timerId = $wnd.setTimeout(function(){\n    func();\n    disposeable != null && dispose(disposeable);\n  }\n  , time);\n  return timerId;\n}\n\nfunction $initCause_0(this$static, cause){\n  return $initCause(this$static, instanceOf(cause, Q$SerializableThrowable)?dynamicCast(cause, Q$SerializableThrowable):cause?createSerializable(cause):null);\n}\n\nfunction $setDesignatedType(this$static, typeName){\n  this$static.typeName = typeName;\n  this$static.exactTypeKnown = true;\n}\n\nfunction SerializableThrowable_0(message){\n  Throwable_0.call(this, message);\n  this.typeName = null;\n}\n\nfunction createSerializable(t){\n  var throwable;\n  throwable = new SerializableThrowable_0(t.getMessage());\n  $setStackTrace(throwable, $getStackTrace(t));\n  $initCause_0(throwable, t.cause);\n  $setDesignatedType(throwable, t.___clazz$.typeName);\n  return throwable;\n}\n\ndefineSeed(50, 36, makeCastMap([Q$SerializableThrowable, Q$Serializable, Q$Throwable]), SerializableThrowable_0);\n_.fillInStackTrace = function fillInStackTrace_0(){\n  return this;\n}\n;\n_.toString$ = function toString_2(){\n  var msg, type_0;\n  type_0 = this.exactTypeKnown?this.typeName:this.typeName + '(EXACT TYPE UNKNOWN)';\n  msg = this.detailMessage;\n  return msg == null?type_0:type_0 + ': ' + msg;\n}\n;\n_.exactTypeKnown = false;\nfunction $setInnerText(elem, text_0){\n  elem.textContent = text_0 || '';\n}\n\nfunction isOrHasChildImpl(parent_0, child){\n  if (parent_0.nodeType != 1 && parent_0.nodeType != 9) {\n    return parent_0 == child;\n  }\n  if (child.nodeType != 1) {\n    child = child.parentNode;\n    if (!child) {\n      return false;\n    }\n  }\n  if (parent_0.nodeType == 9) {\n    return parent_0 === child || parent_0.body && parent_0.body.contains(child);\n  }\n   else {\n    return parent_0 === child || parent_0.contains(child);\n  }\n}\n\nfunction $setClassName(this$static, className){\n  this$static.className = className;\n}\n\nfunction $setInnerHTML(this$static, html){\n  this$static.innerHTML = html || '';\n}\n\nfunction $setPropertyString(this$static, name_0, value_0){\n  this$static[name_0] = value_0;\n}\n\nfunction Enum_0(name_0, ordinal){\n  this.name_0 = name_0;\n  this.ordinal = ordinal;\n}\n\ndefineSeed(61, 1, makeCastMap([Q$Serializable, Q$Comparable, Q$Enum]));\n_.equals$ = function equals_0(other){\n  return this === other;\n}\n;\n_.hashCode$ = function hashCode_1(){\n  return getHashCode(this);\n}\n;\n_.toString$ = function toString_3(){\n  return this.name_0;\n}\n;\n_.ordinal = 0;\nfunction $clinit_Style$TextAlign(){\n  $clinit_Style$TextAlign = nullMethod;\n  CENTER = new Style$TextAlign$1_0;\n  JUSTIFY = new Style$TextAlign$2_0;\n  LEFT = new Style$TextAlign$3_0;\n  RIGHT = new Style$TextAlign$4_0;\n  $VALUES = initValues(_3Lcom_google_gwt_dom_client_Style$TextAlign_2_classLit, makeCastMap([Q$Serializable]), Q$Style$TextAlign, [CENTER, JUSTIFY, LEFT, RIGHT]);\n}\n\nfunction Style$TextAlign_0(enum$name, enum$ordinal){\n  Enum_0.call(this, enum$name, enum$ordinal);\n}\n\nfunction values_0(){\n  $clinit_Style$TextAlign();\n  return $VALUES;\n}\n\ndefineSeed(60, 61, makeCastMap([Q$Style$HasCssName, Q$Style$TextAlign, Q$Serializable, Q$Comparable, Q$Enum]));\nvar $VALUES, CENTER, JUSTIFY, LEFT, RIGHT;\nfunction Style$TextAlign$1_0(){\n  Style$TextAlign_0.call(this, 'CENTER', 0);\n}\n\ndefineSeed(62, 60, makeCastMap([Q$Style$HasCssName, Q$Style$TextAlign, Q$Serializable, Q$Comparable, Q$Enum]), Style$TextAlign$1_0);\nfunction Style$TextAlign$2_0(){\n  Style$TextAlign_0.call(this, 'JUSTIFY', 1);\n}\n\ndefineSeed(63, 60, makeCastMap([Q$Style$HasCssName, Q$Style$TextAlign, Q$Serializable, Q$Comparable, Q$Enum]), Style$TextAlign$2_0);\nfunction Style$TextAlign$3_0(){\n  Style$TextAlign_0.call(this, 'LEFT', 2);\n}\n\ndefineSeed(64, 60, makeCastMap([Q$Style$HasCssName, Q$Style$TextAlign, Q$Serializable, Q$Comparable, Q$Enum]), Style$TextAlign$3_0);\nfunction Style$TextAlign$4_0(){\n  Style$TextAlign_0.call(this, 'RIGHT', 3);\n}\n\ndefineSeed(65, 60, makeCastMap([Q$Style$HasCssName, Q$Style$TextAlign, Q$Serializable, Q$Comparable, Q$Enum]), Style$TextAlign$4_0);\nfunction fireNativeEvent(){\n}\n\nfunction throwIfNull(value_0){\n  if (null == value_0) {\n    throw new NullPointerException_1('encodedURLComponent cannot be null');\n  }\n}\n\nfunction getDirectionOnElement(elem){\n  var dirPropertyValue;\n  dirPropertyValue = elem['dir'] == null?null:String(elem['dir']);\n  if ($equalsIgnoreCase('rtl', dirPropertyValue)) {\n    return $clinit_HasDirection$Direction() , RTL;\n  }\n   else if ($equalsIgnoreCase('ltr', dirPropertyValue)) {\n    return $clinit_HasDirection$Direction() , LTR;\n  }\n  return $clinit_HasDirection$Direction() , DEFAULT;\n}\n\nfunction setDirectionOnElement(elem, direction){\n  switch (direction.ordinal) {\n    case 0:\n      {\n        $setPropertyString(elem, 'dir', 'rtl');\n        break;\n      }\n\n    case 1:\n      {\n        $setPropertyString(elem, 'dir', 'ltr');\n        break;\n      }\n\n    case 2:\n      {\n        getDirectionOnElement(elem) != ($clinit_HasDirection$Direction() , DEFAULT) && $setPropertyString(elem, 'dir', '');\n        break;\n      }\n\n  }\n}\n\nfunction $clinit_HasDirection$Direction(){\n  $clinit_HasDirection$Direction = nullMethod;\n  RTL = new HasDirection$Direction_0('RTL', 0);\n  LTR = new HasDirection$Direction_0('LTR', 1);\n  DEFAULT = new HasDirection$Direction_0('DEFAULT', 2);\n  $VALUES_0 = initValues(_3Lcom_google_gwt_i18n_client_HasDirection$Direction_2_classLit, makeCastMap([Q$Serializable]), Q$HasDirection$Direction, [RTL, LTR, DEFAULT]);\n}\n\nfunction HasDirection$Direction_0(enum$name, enum$ordinal){\n  Enum_0.call(this, enum$name, enum$ordinal);\n}\n\nfunction values_1(){\n  $clinit_HasDirection$Direction();\n  return $VALUES_0;\n}\n\ndefineSeed(72, 61, makeCastMap([Q$HasDirection$Direction, Q$Serializable, Q$Comparable, Q$Enum]), HasDirection$Direction_0);\nvar $VALUES_0, DEFAULT, LTR, RTL;\nfunction Array_0(){\n}\n\nfunction createFrom(array, length_0){\n  var a, result;\n  a = array;\n  result = createFromSeed(0, length_0);\n  initValues(a.___clazz$, a.castableTypeMap$, a.queryId$, result);\n  return result;\n}\n\nfunction createFromSeed(seedType, length_0){\n  var array = new Array(length_0);\n  if (seedType == 3) {\n    for (var i = 0; i < length_0; ++i) {\n      array[i] = {l:0, m:0, h:0};\n    }\n  }\n   else if (seedType > 0 && seedType < 3) {\n    var value_0 = seedType == 1?0:false;\n    for (var i = 0; i < length_0; ++i) {\n      array[i] = value_0;\n    }\n  }\n  return array;\n}\n\nfunction initDim(arrayClass, castableTypeMap, queryId, length_0, seedType){\n  var result;\n  result = createFromSeed(seedType, length_0);\n  initValues(arrayClass, castableTypeMap, queryId, result);\n  return result;\n}\n\nfunction initValues(arrayClass, castableTypeMap, queryId, array){\n  $clinit_Array$ExpandoWrapper();\n  wrapArray(array, expandoNames_0, expandoValues_0);\n  array.___clazz$ = arrayClass;\n  array.castableTypeMap$ = castableTypeMap;\n  array.queryId$ = queryId;\n  return array;\n}\n\nfunction setCheck(array, index_0, value_0){\n  if (value_0 != null) {\n    if (array.queryId$ > 0 && !canCastUnsafe(value_0, array.queryId$)) {\n      throw new ArrayStoreException_0;\n    }\n     else if (array.queryId$ == -1 && (value_0.typeMarker$ == nullMethod || canCast(value_0, 1))) {\n      throw new ArrayStoreException_0;\n    }\n     else if (array.queryId$ < -1 && !(value_0.typeMarker$ != nullMethod && !canCast(value_0, 1)) && !canCastUnsafe(value_0, -array.queryId$)) {\n      throw new ArrayStoreException_0;\n    }\n  }\n  return array[index_0] = value_0;\n}\n\ndefineSeed(73, 1, {}, Array_0);\n_.queryId$ = 0;\nfunction $clinit_Array$ExpandoWrapper(){\n  $clinit_Array$ExpandoWrapper = nullMethod;\n  expandoNames_0 = [];\n  expandoValues_0 = [];\n  initExpandos(new Array_0, expandoNames_0, expandoValues_0);\n}\n\nfunction initExpandos(protoType, expandoNames, expandoValues){\n  var i = 0, value_0;\n  for (var name_0 in protoType) {\n    if (value_0 = protoType[name_0]) {\n      expandoNames[i] = name_0;\n      expandoValues[i] = value_0;\n      ++i;\n    }\n  }\n}\n\nfunction wrapArray(array, expandoNames, expandoValues){\n  $clinit_Array$ExpandoWrapper();\n  for (var i = 0, c = expandoNames.length; i < c; ++i) {\n    array[expandoNames[i]] = expandoValues[i];\n  }\n}\n\nvar expandoNames_0, expandoValues_0;\nfunction canCast(src_0, dstId){\n  return src_0.castableTypeMap$ && !!src_0.castableTypeMap$[dstId];\n}\n\nfunction canCastUnsafe(src_0, dstId){\n  return src_0.castableTypeMap$ && src_0.castableTypeMap$[dstId];\n}\n\nfunction dynamicCast(src_0, dstId){\n  if (src_0 != null && !canCastUnsafe(src_0, dstId)) {\n    throw new ClassCastException_0;\n  }\n  return src_0;\n}\n\nfunction dynamicCastJso(src_0){\n  if (src_0 != null && (src_0.typeMarker$ == nullMethod || canCast(src_0, 1))) {\n    throw new ClassCastException_0;\n  }\n  return src_0;\n}\n\nfunction instanceOf(src_0, dstId){\n  return src_0 != null && canCast(src_0, dstId);\n}\n\nfunction instanceOfJso(src_0){\n  return src_0 != null && src_0.typeMarker$ != nullMethod && !canCast(src_0, 1);\n}\n\nfunction isJavaObject(src_0){\n  return src_0.typeMarker$ == nullMethod || canCast(src_0, 1);\n}\n\nfunction maskUndefined(src_0){\n  return src_0 == null?null:src_0;\n}\n\nfunction round_int(x_0){\n  return ~~Math.max(Math.min(x_0, 2147483647), -2147483648);\n}\n\nfunction init(){\n  var runtimeValue;\n  isStatsAvailable() && onModuleStart('com.google.gwt.useragent.client.UserAgentAsserter');\n  runtimeValue = $getRuntimeValue();\n  $equals('ie9', runtimeValue) || ($wnd.alert('ERROR: Possible problem with your *.gwt.xml module file.\\nThe compile time user.agent value (ie9) does not match the runtime user.agent value (' + runtimeValue + '). Expect more errors.\\n') , undefined);\n  isStatsAvailable() && onModuleStart('com.google.gwt.user.client.DocumentModeAsserter');\n  $onModuleLoad_0();\n  isStatsAvailable() && onModuleStart('com.google.gwt.logging.client.LogConfiguration');\n  $onModuleLoad($clinit_LogConfiguration());\n  isStatsAvailable() && onModuleStart('com.github.rma350.kidneyx.web.client.KidneyXWeb');\n  $publish(new KidneyXWeb_0);\n  $clinit_KidneyXWeb();\n  $wnd.onGWTModuleLoaded();\n}\n\nfunction getCachableJavaScriptException(e_0){\n  var jse = e_0.__gwt$exception;\n  if (!jse) {\n    jse = new JavaScriptException_0(e_0);\n    try {\n      e_0.__gwt$exception = jse;\n    }\n     catch (e) {\n    }\n  }\n  return jse;\n}\n\nfunction unwrap(e){\n  var jse;\n  if (instanceOf(e, Q$JavaScriptException)) {\n    jse = dynamicCast(e, Q$JavaScriptException);\n    if (jse.e !== ($clinit_JavaScriptException() , NOT_SET)) {\n      return jse.e === NOT_SET?null:jse.e;\n    }\n  }\n  return e;\n}\n\nfunction wrap(e){\n  if (instanceOf(e, Q$Throwable)) {\n    return e;\n  }\n  return e == null?new JavaScriptException_0(null):getCachableJavaScriptException(e);\n}\n\nfunction create_0(value_0){\n  var a0, a1, a2;\n  a0 = value_0 & 4194303;\n  a1 = value_0 >> 22 & 4194303;\n  a2 = value_0 < 0?1048575:0;\n  return create0(a0, a1, a2);\n}\n\nfunction create0(l_0, m_0, h_0){\n  return {l:l_0, m:m_0, h:h_0};\n}\n\nfunction toDoubleHelper(a){\n  return a.l + a.m * 4194304 + a.h * 17592186044416;\n}\n\nfunction eq(a, b){\n  return a.l == b.l && a.m == b.m && a.h == b.h;\n}\n\nfunction fromDouble(value_0){\n  var a0, a1, a2, negative, result, neg0, neg1, neg2;\n  if (isNaN(value_0)) {\n    return $clinit_LongLib$Const() , ZERO;\n  }\n  if (value_0 < -9223372036854775808) {\n    return $clinit_LongLib$Const() , MIN_VALUE;\n  }\n  if (value_0 >= 9223372036854775807) {\n    return $clinit_LongLib$Const() , MAX_VALUE;\n  }\n  negative = false;\n  if (value_0 < 0) {\n    negative = true;\n    value_0 = -value_0;\n  }\n  a2 = 0;\n  if (value_0 >= 17592186044416) {\n    a2 = round_int(value_0 / 17592186044416);\n    value_0 -= a2 * 17592186044416;\n  }\n  a1 = 0;\n  if (value_0 >= 4194304) {\n    a1 = round_int(value_0 / 4194304);\n    value_0 -= a1 * 4194304;\n  }\n  a0 = round_int(value_0);\n  result = create0(a0, a1, a2);\n  negative && (neg0 = ~result.l + 1 & 4194303 , neg1 = ~result.m + (neg0 == 0?1:0) & 4194303 , neg2 = ~result.h + (neg0 == 0 && neg1 == 0?1:0) & 1048575 , result.l = neg0 , result.m = neg1 , result.h = neg2 , undefined);\n  return result;\n}\n\nfunction fromInt(value_0){\n  var rebase, result;\n  if (value_0 > -129 && value_0 < 128) {\n    rebase = value_0 + 128;\n    boxedValues == null && (boxedValues = initDim(_3Lcom_google_gwt_lang_LongLibBase$LongEmul_2_classLit, makeCastMap([Q$Serializable]), Q$LongLibBase$LongEmul, 256, 0));\n    result = boxedValues[rebase];\n    !result && (result = boxedValues[rebase] = create_0(value_0));\n    return result;\n  }\n  return create_0(value_0);\n}\n\nfunction gte(a, b){\n  var signa, signb;\n  signa = a.h >> 19;\n  signb = b.h >> 19;\n  return signa == 0?signb != 0 || a.h > b.h || a.h == b.h && a.m > b.m || a.h == b.h && a.m == b.m && a.l >= b.l:!(signb == 0 || a.h < b.h || a.h == b.h && a.m < b.m || a.h == b.h && a.m == b.m && a.l < b.l);\n}\n\nfunction shru(a, n){\n  var a2, res0, res1, res2;\n  n &= 63;\n  a2 = a.h & 1048575;\n  if (n < 22) {\n    res2 = a2 >>> n;\n    res1 = a.m >> n | a2 << 22 - n;\n    res0 = a.l >> n | a.m << 22 - n;\n  }\n   else if (n < 44) {\n    res2 = 0;\n    res1 = a2 >>> n - 22;\n    res0 = a.m >> n - 22 | a.h << 44 - n;\n  }\n   else {\n    res2 = 0;\n    res1 = 0;\n    res0 = a2 >>> n - 44;\n  }\n  return {l:res0 & 4194303, m:res1 & 4194303, h:res2 & 1048575};\n}\n\nfunction toDouble(a){\n  var neg0, neg1, neg2;\n  if (eq(a, ($clinit_LongLib$Const() , MIN_VALUE))) {\n    return -9223372036854775808;\n  }\n  if (!gte(a, ZERO)) {\n    return -toDoubleHelper((neg0 = ~a.l + 1 & 4194303 , neg1 = ~a.m + (neg0 == 0?1:0) & 4194303 , neg2 = ~a.h + (neg0 == 0 && neg1 == 0?1:0) & 1048575 , create0(neg0, neg1, neg2)));\n  }\n  return a.l + a.m * 4194304 + a.h * 17592186044416;\n}\n\nfunction toInt(a){\n  return a.l | a.m << 22;\n}\n\nfunction xor(a, b){\n  return {l:a.l ^ b.l, m:a.m ^ b.m, h:a.h ^ b.h};\n}\n\nvar boxedValues;\nfunction $clinit_LongLib$Const(){\n  $clinit_LongLib$Const = nullMethod;\n  MAX_VALUE = create0(4194303, 4194303, 524287);\n  MIN_VALUE = create0(0, 0, 524288);\n  fromInt(1);\n  fromInt(2);\n  ZERO = fromInt(0);\n}\n\nvar MAX_VALUE, MIN_VALUE, ZERO;\nfunction isStatsAvailable(){\n  return !!$stats;\n}\n\nfunction onModuleStart(mainClassName){\n  return $stats({moduleName:$moduleName, sessionId:$sessionId, subSystem:'startup', evtGroup:'moduleStartup', millis:(new Date).getTime(), type:'onModuleLoadStart', className:mainClassName});\n}\n\nfunction $getLevel(this$static){\n  if (this$static.level) {\n    return this$static.level;\n  }\n  return $clinit_Level() , ALL;\n}\n\nfunction $setFormatter(this$static, newFormatter){\n  this$static.formatter = newFormatter;\n}\n\nfunction $setLevel(this$static, newLevel){\n  this$static.level = newLevel;\n}\n\ndefineSeed(86, 1, makeCastMap([Q$Handler]));\nfunction ConsoleLogHandler_0(){\n  $setFormatter(this, new TextLogFormatter_0(true));\n  $setLevel(this, ($clinit_Level() , ALL));\n}\n\ndefineSeed(85, 86, makeCastMap([Q$Handler]), ConsoleLogHandler_0);\n_.publish = function publish(record){\n  var msg, val;\n  if (!(window.console != null && window.console.firebug == null) || ($getLevel(this) , -2147483648) > record.level.intValue()) {\n    return;\n  }\n  msg = this.formatter.format(record);\n  val = record.level.intValue();\n  val >= ($clinit_Level() , 1000)?(window.console.error(msg) , undefined):val >= 900?(window.console.warn(msg) , undefined):val >= 800?(window.console.info(msg) , undefined):(window.console.log(msg) , undefined);\n}\n;\nfunction DevelopmentModeLogHandler_0(){\n  $setFormatter(this, new TextLogFormatter_0(false));\n  $setLevel(this, ($clinit_Level() , ALL));\n}\n\ndefineSeed(87, 86, makeCastMap([Q$Handler]), DevelopmentModeLogHandler_0);\n_.publish = function publish_0(record){\n  return;\n}\n;\nfunction $isSupported(){\n  return !!(window.console && window.console.firebug);\n}\n\nfunction $warn(message){\n  window.console.warn(message);\n}\n\nfunction FirebugLogHandler_0(){\n  $isSupported() && $warn('FirebugLogHandler is deprecated, use the ConsoleLogHandler instead.');\n  $setFormatter(this, new TextLogFormatter_0(true));\n  $setLevel(this, ($clinit_Level() , ALL));\n}\n\ndefineSeed(88, 86, makeCastMap([Q$Handler]), FirebugLogHandler_0);\n_.publish = function publish_1(record){\n  var msg, val;\n  if (!$isSupported() || ($getLevel(this) , -2147483648) > record.level.intValue()) {\n    return;\n  }\n  msg = this.formatter.format(record);\n  val = record.level.intValue();\n  val <= ($clinit_Level() , 500)?(window.console.debug(msg) , undefined):val < 900?(window.console.info(msg) , undefined):val < 1000?$warn(msg):(window.console.error(msg) , undefined);\n}\n;\nfunction HasWidgetsLogHandler_0(){\n  $setFormatter(this, new HtmlLogFormatter_0);\n  $setLevel(this, ($clinit_Level() , ALL));\n}\n\ndefineSeed(89, 86, makeCastMap([Q$Handler]), HasWidgetsLogHandler_0);\n_.publish = function publish_2(record){\n  var formatter, msg;\n  if (($getLevel(this) , -2147483648) > record.level.intValue()) {\n    return;\n  }\n  formatter = this.formatter;\n  msg = formatter.format(record);\n  instanceOf(formatter, Q$HtmlLogFormatter)?(new HTML_0(msg) , undefined):(new Label_1(msg) , undefined);\n}\n;\ndefineSeed(92, 1, {});\nfunction $getRecordInfo(event_0, newline){\n  var date, s;\n  date = new Date_2(event_0.millis);\n  s = new StringBuilder_0;\n  $append_0(s, $toString(date));\n  $append(s.impl, ' ');\n  $append_0(s, event_0.loggerName);\n  $append(s.impl, newline);\n  $append_0(s, event_0.level.getName());\n  $append(s.impl, ': ');\n  return s.impl.string;\n}\n\ndefineSeed(91, 92, {});\n",
"function $getColor(logLevel){\n  if (logLevel == ($clinit_Level() , 2147483647)) {\n    return '#000';\n  }\n  if (logLevel >= 1000) {\n    return '#F00';\n  }\n  if (logLevel >= 900) {\n    return '#E56717';\n  }\n  if (logLevel >= 800) {\n    return '#20b000';\n  }\n  if (logLevel >= 700) {\n    return '#2B60DE';\n  }\n  if (logLevel >= 500) {\n    return '#F0F';\n  }\n  if (logLevel >= 400) {\n    return '#F0F';\n  }\n  if (logLevel >= 300) {\n    return '#F0F';\n  }\n  return '#000';\n}\n\nfunction $getEscaped(text_0){\n  text_0 = $replaceAll(text_0, '<', '&lt;');\n  text_0 = $replaceAll(text_0, '>', '&gt;');\n  text_0 = $replaceAll(text_0, '\\t', '&nbsp;&nbsp;&nbsp;');\n  return text_0;\n}\n\nfunction HtmlLogFormatter_0(){\n  this.showStackTraces = true;\n}\n\ndefineSeed(90, 91, makeCastMap([Q$HtmlLogFormatter]), HtmlLogFormatter_0);\n_.format = function format(event_0){\n  var html, prefix;\n  html = new StringBuilder_0;\n  $append_0(html, (prefix = new StringBuilder_0 , $append(prefix.impl, \"<span style='color:\") , $append_0(prefix, $getColor(event_0.level.intValue())) , $append(prefix.impl, \"'>\") , $append(prefix.impl, '<code>') , prefix.impl.string));\n  $append_0(html, $getRecordInfo(event_0, ' '));\n  $append_0(html, $getEscaped(event_0.msg));\n  this.showStackTraces && !!event_0.thrown && $printStackTrace(event_0.thrown, new HtmlLogFormatter$1_0(html, html));\n  $append(html.impl, '<\\/code><\\/span>');\n  return html.impl.string;\n}\n;\n_.showStackTraces = false;\ndefineSeed(97, 1, {});\ndefineSeed(96, 97, {});\nfunction PrintStream_0(){\n}\n\ndefineSeed(95, 96, {}, PrintStream_0);\n_.println = function println(s){\n}\n;\nfunction StackTracePrintStream_0(builder){\n  this.builder = builder;\n}\n\ndefineSeed(94, 95, {}, StackTracePrintStream_0);\n_.append = function append(text_0){\n  $append_0(this.builder, text_0);\n}\n;\n_.newLine = function newLine(){\n  $append_0(this.builder, '\\n');\n}\n;\n_.println = function println_0(str){\n  this.append(str);\n  this.newLine();\n}\n;\nfunction HtmlLogFormatter$1_0($anonymous0, val$html){\n  this.val$html = val$html;\n  StackTracePrintStream_0.call(this, $anonymous0);\n}\n\ndefineSeed(93, 94, {}, HtmlLogFormatter$1_0);\n_.append = function append_0(str){\n  $append_0(this.val$html, $getEscaped(str));\n}\n;\n_.newLine = function newLine_0(){\n  $append_0(this.val$html, '<br>');\n}\n;\nfunction $clinit_LogConfiguration(){\n  $clinit_LogConfiguration = nullMethod;\n  impl = new LogConfiguration$LogConfigurationImplRegular_0;\n}\n\nfunction $onModuleLoad(){\n  var log_0;\n  $configureClientSideLogging(impl);\n  if (!uncaughtExceptionHandler) {\n    log_0 = ($clinit_Logger() , $getLoggerHelper(Lcom_google_gwt_logging_client_LogConfiguration_2_classLit.typeName));\n    setUncaughtExceptionHandler(new LogConfiguration$1_0(log_0));\n  }\n}\n\nvar impl;\nfunction LogConfiguration$1_0(val$log){\n  this.val$log = val$log;\n}\n\ndefineSeed(99, 1, {}, LogConfiguration$1_0);\nfunction $addHandlerIfNotNull(l_0, h_0){\n  $addHandler(l_0.impl, h_0);\n}\n\nfunction $configureClientSideLogging(this$static){\n  this$static.root = ($clinit_Logger() , $getLoggerHelper(''));\n  this$static.root.impl.useParentHandlers = false;\n  $setLevels(this$static.root);\n  $setDefaultHandlers(this$static.root);\n}\n\nfunction $parseLevel(s){\n  if (s == null) {\n    return null;\n  }\n  if ($equals(s, ($clinit_Level() , 'OFF'))) {\n    return OFF;\n  }\n   else if ($equals(s, 'SEVERE')) {\n    return SEVERE;\n  }\n   else if ($equals(s, 'WARNING')) {\n    return WARNING;\n  }\n   else if ($equals(s, 'INFO')) {\n    return INFO;\n  }\n   else if ($equals(s, 'CONFIG')) {\n    return CONFIG;\n  }\n   else if ($equals(s, 'FINE')) {\n    return FINE;\n  }\n   else if ($equals(s, 'FINER')) {\n    return FINER;\n  }\n   else if ($equals(s, 'FINEST')) {\n    return FINEST;\n  }\n   else if ($equals(s, 'ALL')) {\n    return ALL;\n  }\n  return null;\n}\n\nfunction $setDefaultHandlers(l_0){\n  var console_0, dev, firebug, loggingWidget, remote, system;\n  console_0 = new ConsoleLogHandler_0;\n  $addHandler(l_0.impl, console_0);\n  dev = new DevelopmentModeLogHandler_0;\n  $addHandler(l_0.impl, dev);\n  firebug = new FirebugLogHandler_0;\n  $addHandler(l_0.impl, firebug);\n  system = new SystemLogHandler_0;\n  $addHandler(l_0.impl, system);\n  remote = new NullLogHandler_0;\n  !!remote || $addHandler(l_0.impl, null);\n  loggingWidget = new NullLoggingPopup_0;\n  !loggingWidget && $addHandlerIfNotNull(l_0, new HasWidgetsLogHandler_0);\n}\n\nfunction $setLevels(l_0){\n  var paramLevel, paramsForName;\n  paramLevel = $parseLevel((ensureListParameterMap() , paramsForName = dynamicCast(listParamMap.get_0('logLevel'), Q$List) , !paramsForName?null:dynamicCast(paramsForName.get_1(paramsForName.size_1() - 1), Q$String)));\n  paramLevel?$setLevel_0(l_0.impl, paramLevel):$setLevel_1(l_0, ($clinit_Level() , INFO));\n}\n\nfunction LogConfiguration$LogConfigurationImplRegular_0(){\n}\n\ndefineSeed(100, 1, {}, LogConfiguration$LogConfigurationImplRegular_0);\nfunction NullLogHandler_0(){\n}\n\ndefineSeed(101, 86, makeCastMap([Q$Handler]), NullLogHandler_0);\n_.publish = function publish_3(record){\n}\n;\nfunction NullLoggingPopup_0(){\n}\n\ndefineSeed(102, 1, {}, NullLoggingPopup_0);\n_.iterator = function iterator(){\n  return null;\n}\n;\nfunction SystemLogHandler_0(){\n  $setFormatter(this, new TextLogFormatter_0(true));\n  $setLevel(this, ($clinit_Level() , ALL));\n}\n\ndefineSeed(103, 86, makeCastMap([Q$Handler]), SystemLogHandler_0);\n_.publish = function publish_4(record){\n  return;\n}\n;\nfunction TextLogFormatter_0(showStackTraces){\n  this.showStackTraces = showStackTraces;\n}\n\ndefineSeed(104, 91, {}, TextLogFormatter_0);\n_.format = function format_0(event_0){\n  var message;\n  message = new StringBuilder_0;\n  $append_0(message, $getRecordInfo(event_0, '\\n'));\n  $append_0(message, event_0.msg);\n  this.showStackTraces && !!event_0.thrown && $printStackTrace(event_0.thrown, new StackTracePrintStream_0(message));\n  return message.impl.string;\n}\n;\n_.showStackTraces = false;\nfunction $addHandler(this$static, handler){\n  $add_0(this$static.handlers, handler);\n}\n\nfunction $getEffectiveLevel(this$static){\n  var effectiveLevel, logger;\n  if (this$static.level) {\n    return this$static.level;\n  }\n  logger = this$static.parent_0;\n  while (logger) {\n    effectiveLevel = logger.impl.level;\n    if (effectiveLevel) {\n      return effectiveLevel;\n    }\n    logger = logger.impl.parent_0;\n  }\n  return $clinit_Level() , INFO;\n}\n\nfunction $getHandlers(this$static){\n  return dynamicCast($toArray(this$static.handlers, initDim(_3Ljava_util_logging_Handler_2_classLit, makeCastMap([Q$Serializable, Q$Handler_$1]), Q$Handler, this$static.handlers.size_0, 0)), Q$Handler_$1);\n}\n\nfunction $getLoggerHelper(name_0){\n  var logger, manager, newLogger;\n  manager = (!singleton && (singleton = new LogManager_0) , singleton);\n  logger = dynamicCast($get(manager.loggerList, name_0), Q$Logger);\n  if (!logger) {\n    newLogger = new LoggerWithExposedConstructor_0(name_0);\n    $addLogger(manager, newLogger);\n    return newLogger;\n  }\n  return logger;\n}\n\nfunction $isLoggable(this$static, messageLevel){\n  return $getEffectiveLevel(this$static).intValue() <= messageLevel.intValue();\n}\n\nfunction $log(this$static, level, msg, thrown){\n  var record;\n  if ($getEffectiveLevel(this$static).intValue() <= level.intValue()) {\n    record = new LogRecord_0(level, msg);\n    record.thrown = instanceOf(thrown, Q$SerializableThrowable)?dynamicCast(thrown, Q$SerializableThrowable):thrown?createSerializable(thrown):null;\n    $setLoggerName(record, this$static.name_0);\n    $log_0(this$static, record);\n  }\n}\n\nfunction $log_0(this$static, record){\n  var handler, handler$array, handler$array0, handler$index, handler$index0, handler$max, handler$max0, logger;\n  if ($isLoggable(this$static, record.level)) {\n    for (handler$array0 = dynamicCast($toArray(this$static.handlers, initDim(_3Ljava_util_logging_Handler_2_classLit, makeCastMap([Q$Serializable, Q$Handler_$1]), Q$Handler, this$static.handlers.size_0, 0)), Q$Handler_$1) , handler$index = 0 , handler$max0 = handler$array0.length; handler$index < handler$max0; ++handler$index) {\n      handler = handler$array0[handler$index];\n      handler.publish(record);\n    }\n    logger = this$static.useParentHandlers?this$static.parent_0:null;\n    while (logger) {\n      for (handler$array = $getHandlers(logger.impl) , handler$index0 = 0 , handler$max = handler$array.length; handler$index0 < handler$max; ++handler$index0) {\n        handler = handler$array[handler$index0];\n        handler.publish(record);\n      }\n      logger = logger.impl.useParentHandlers?logger.impl.parent_0:null;\n    }\n  }\n}\n\nfunction $setLevel_0(this$static, newLevel){\n  this$static.level = newLevel;\n}\n\nfunction $setName(this$static, newName){\n  this$static.name_0 = newName;\n}\n\nfunction $setParent(this$static, newParent){\n  !!newParent && (this$static.parent_0 = newParent);\n}\n\nfunction LoggerImplRegular_0(){\n  this.useParentHandlers = true;\n  this.handlers = new ArrayList_0;\n}\n\ndefineSeed(105, 1, {}, LoggerImplRegular_0);\n_.level = null;\n_.useParentHandlers = false;\nfunction $clinit_Logger(){\n  $clinit_Logger = nullMethod;\n  new LoggerImplRegular_0;\n}\n\nfunction $log_1(this$static, level, msg){\n  $log(this$static.impl, level, msg, null);\n}\n\nfunction $log_2(this$static, level, msg, thrown){\n  $log(this$static.impl, level, msg, thrown);\n}\n\nfunction $setLevel_1(this$static, newLevel){\n  $setLevel_0(this$static.impl, newLevel);\n}\n\nfunction Logger_0(name_0){\n  $clinit_Logger();\n  this.impl = new LoggerImplRegular_0;\n  $setName(this.impl, name_0);\n}\n\ndefineSeed(107, 1, makeCastMap([Q$Logger]), Logger_0);\nfunction LoggerWithExposedConstructor_0(name_0){\n  $clinit_Logger();\n  Logger_0.call(this, name_0);\n}\n\ndefineSeed(106, 107, makeCastMap([Q$Logger]), LoggerWithExposedConstructor_0);\nfunction $set(this$static, array, offset){\n  this$static.set(array, offset);\n}\n\nfunction $clinit_DOM(){\n  $clinit_DOM = nullMethod;\n  $clinit_DOMImplStandard();\n}\n\nvar currentEvent = null, sCaptureElem;\nfunction $onModuleLoad_0(){\n  var allowedModes, currentMode, i;\n  currentMode = $doc.compatMode;\n  allowedModes = initValues(_3Ljava_lang_String_2_classLit, makeCastMap([Q$Serializable]), Q$String, ['CSS1Compat']);\n  for (i = 0; i < allowedModes.length; i++) {\n    if ($equals(allowedModes[i], currentMode)) {\n      return;\n    }\n  }\n  allowedModes.length == 1 && $equals('CSS1Compat', allowedModes[0]) && $equals('BackCompat', currentMode)?\"GWT no longer supports Quirks Mode (document.compatMode=' BackCompat').<br>Make sure your application's host HTML page has a Standards Mode (document.compatMode=' CSS1Compat') doctype,<br>e.g. by using &lt;!doctype html&gt; at the start of your application's HTML page.<br><br>To continue using this unsupported rendering mode and risk layout problems, suppress this message by adding<br>the following line to your*.gwt.xml module file:<br>&nbsp;&nbsp;&lt;extend-configuration-property name=\\\"document.compatMode\\\" value=\\\"\" + currentMode + '\"/&gt;':\"Your *.gwt.xml module configuration prohibits the use of the current doucment rendering mode (document.compatMode=' \" + currentMode + \"').<br>Modify your application's host HTML page doctype, or update your custom 'document.compatMode' configuration property settings.\";\n}\n\nfunction buildListParamMap(queryString){\n  var entry, entry$iterator, kv, kvPair, kvPair$array, kvPair$index, kvPair$max, out, qs, values, regexp;\n  out = new HashMap_0;\n  if (queryString != null && queryString.length > 1) {\n    qs = $substring(queryString, 1);\n    for (kvPair$array = $split(qs, '&', 0) , kvPair$index = 0 , kvPair$max = kvPair$array.length; kvPair$index < kvPair$max; ++kvPair$index) {\n      kvPair = kvPair$array[kvPair$index];\n      kv = $split(kvPair, '=', 2);\n      if (kv[0].length == 0) {\n        continue;\n      }\n      values = dynamicCast(out.get_0(kv[0]), Q$List);\n      if (!values) {\n        values = new ArrayList_0;\n        out.put(kv[0], values);\n      }\n      values.add_0(kv.length > 1?(throwIfNull(kv[1]) , regexp = /\\+/g , decodeURIComponent(kv[1].replace(regexp, '%20'))):'');\n    }\n  }\n  for (entry$iterator = out.entrySet_0().iterator(); entry$iterator.hasNext();) {\n    entry = dynamicCast(entry$iterator.next(), Q$Map$Entry);\n    entry.setValue(unmodifiableList(dynamicCast(entry.getValue(), Q$List)));\n  }\n  out = new Collections$UnmodifiableMap_0(out);\n  return out;\n}\n\nfunction ensureListParameterMap(){\n  var currentQueryString, href_0, hashLoc, questionLoc;\n  currentQueryString = (href_0 = $wnd.location.href , hashLoc = href_0.indexOf('#') , hashLoc >= 0 && (href_0 = href_0.substring(0, hashLoc)) , questionLoc = href_0.indexOf('?') , questionLoc > 0?href_0.substring(questionLoc):'');\n  if (!listParamMap || !$equals(cachedQueryString, currentQueryString)) {\n    listParamMap = buildListParamMap(currentQueryString);\n    cachedQueryString = currentQueryString;\n  }\n}\n\nvar cachedQueryString = '', listParamMap;\nfunction $eventGetTypeInt(eventType){\n  switch (eventType) {\n    case 'blur':\n      return 4096;\n    case 'change':\n      return 1024;\n    case 'click':\n      return 1;\n    case 'dblclick':\n      return 2;\n    case 'focus':\n      return 2048;\n    case 'keydown':\n      return 128;\n    case 'keypress':\n      return 256;\n    case 'keyup':\n      return 512;\n    case 'load':\n      return 32768;\n    case 'losecapture':\n      return 8192;\n    case 'mousedown':\n      return 4;\n    case 'mousemove':\n      return 64;\n    case 'mouseout':\n      return 32;\n    case 'mouseover':\n      return 16;\n    case 'mouseup':\n      return 8;\n    case 'scroll':\n      return 16384;\n    case 'error':\n      return 65536;\n    case 'DOMMouseScroll':\n    case 'mousewheel':\n      return 131072;\n    case 'contextmenu':\n      return 262144;\n    case 'paste':\n      return 524288;\n    case 'touchstart':\n      return 1048576;\n    case 'touchmove':\n      return 2097152;\n    case 'touchend':\n      return 4194304;\n    case 'touchcancel':\n      return 8388608;\n    case 'gesturestart':\n      return 16777216;\n    case 'gesturechange':\n      return 33554432;\n    case 'gestureend':\n      return 67108864;\n    default:return -1;\n  }\n}\n\nfunction $clinit_DOMImplStandard(){\n  $clinit_DOMImplStandard = nullMethod;\n}\n\nfunction $setTextOrHtml(this$static, content_0, isHtml){\n  isHtml?$setInnerHTML(this$static.element, content_0):$setInnerText(this$static.element, content_0);\n  if (this$static.textDir != this$static.initialElementDir) {\n    this$static.textDir = this$static.initialElementDir;\n    setDirectionOnElement(this$static.element, this$static.initialElementDir);\n  }\n}\n\nfunction DirectionalTextHelper_0(element){\n  this.element = element;\n  this.initialElementDir = getDirectionOnElement(element);\n  this.textDir = this.initialElementDir;\n}\n\ndefineSeed(119, 1, {}, DirectionalTextHelper_0);\nfunction $setElement(this$static, elem){\n  this$static.element = elem;\n}\n\ndefineSeed(124, 1, {});\n_.toString$ = function toString_4(){\n  if (!this.element) {\n    return '(null handle)';\n  }\n  return ($clinit_DOM() , this.element).outerHTML;\n}\n;\ndefineSeed(123, 124, makeCastMap([Q$EventListener]));\n_.onBrowserEvent = function onBrowserEvent(event_0){\n  var related;\n  switch ($clinit_DOM() , $eventGetTypeInt(event_0.type)) {\n    case 16:\n    case 32:\n      related = event_0.relatedTarget;\n      if (!!related && isOrHasChildImpl(this.element, related)) {\n        return;\n      }\n\n  }\n  fireNativeEvent($clinit_DOM());\n}\n;\nfunction LabelBase_0(element){\n  $setElement(this, ($clinit_DOM() , element));\n  this.directionalTextHelper = new DirectionalTextHelper_0(this.element);\n}\n\ndefineSeed(122, 123, makeCastMap([Q$EventListener]));\nfunction Label_0(element){\n  LabelBase_0.call(this, element, $equalsIgnoreCase('span', element.tagName));\n}\n\nfunction Label_1(text_0){\n  LabelBase_0.call(this, $doc.createElement('div'));\n  $setClassName(($clinit_DOM() , this.element), 'gwt-Label');\n  $setTextOrHtml(this.directionalTextHelper, text_0, false);\n}\n\ndefineSeed(121, 122, makeCastMap([Q$EventListener]), Label_1);\nfunction HTML_0(html){\n  Label_0.call(this, $doc.createElement('div'));\n  $setClassName(($clinit_DOM() , this.element), 'gwt-HTML');\n  $setTextOrHtml(this.directionalTextHelper, html, true);\n}\n\ndefineSeed(120, 121, makeCastMap([Q$EventListener]), HTML_0);\nfunction $clinit_HasHorizontalAlignment(){\n  $clinit_HasHorizontalAlignment = nullMethod;\n  $clinit_Style$TextAlign();\n}\n\nfunction $getRuntimeValue(){\n  var ua = navigator.userAgent.toLowerCase();\n  var makeVersion = function(result){\n    return parseInt(result[1]) * 1000 + parseInt(result[2]);\n  }\n  ;\n  if (function(){\n    return ua.indexOf('webkit') != -1;\n  }\n  ())\n    return 'safari';\n  if (function(){\n    return ua.indexOf('msie') != -1 && $doc.documentMode >= 10;\n  }\n  ())\n    return 'ie10';\n  if (function(){\n    return ua.indexOf('msie') != -1 && $doc.documentMode >= 9;\n  }\n  ())\n    return 'ie9';\n  if (function(){\n    return ua.indexOf('msie') != -1 && $doc.documentMode >= 8;\n  }\n  ())\n    return 'ie8';\n  if (function(){\n    return ua.indexOf('gecko') != -1;\n  }\n  ())\n    return 'gecko1_8';\n  return 'unknown';\n}\n\nfunction ArrayStoreException_0(){\n  RuntimeException_0.call(this);\n}\n\ndefineSeed(127, 34, makeCastMap([Q$Serializable, Q$Throwable]), ArrayStoreException_0);\nfunction Class_0(){\n}\n\nfunction createForArray(packageName, className, seedId){\n  var clazz;\n  clazz = new Class_0;\n  setName(clazz, packageName, className, seedId != 0?-seedId:0);\n  clazz.modifiers = 4;\n  return clazz;\n}\n\nfunction createForClass(packageName, className, seedId){\n  var clazz;\n  clazz = new Class_0;\n  setName(clazz, packageName, className, seedId);\n  return clazz;\n}\n\nfunction createForEnum(packageName, className, seedId, enumConstantsFunc){\n  var clazz;\n  clazz = new Class_0;\n  setName(clazz, packageName, className, seedId);\n  clazz.modifiers = enumConstantsFunc?8:0;\n  return clazz;\n}\n\nfunction getSeedFunction(clazz){\n  var func = seedTable[clazz.seedId];\n  clazz = null;\n  return func;\n}\n\nfunction setClassLiteral(seedId, clazz){\n  var proto;\n  clazz.seedId = seedId;\n  if (seedId == 2) {\n    proto = String.prototype;\n  }\n   else {\n    if (seedId > 0) {\n      var seed = getSeedFunction(clazz);\n      if (seed) {\n        proto = seed.prototype;\n      }\n       else {\n        seed = seedTable[seedId] = function(){\n        }\n        ;\n        seed.___clazz$ = clazz;\n        return;\n      }\n    }\n     else {\n      return;\n    }\n  }\n  proto.___clazz$ = clazz;\n}\n\nfunction setName(clazz, packageName, className, seedId){\n  clazz.typeName = packageName + className;\n  clazz.simpleName = className;\n  typeof seedId == 'number' && seedId > 0 && setClassLiteral(seedId, clazz);\n}\n\ndefineSeed(128, 1, {}, Class_0);\n_.toString$ = function toString_5(){\n  return ((this.modifiers & 2) != 0?'interface ':(this.modifiers & 1) != 0?'':'class ') + this.typeName;\n}\n;\n_.modifiers = 0;\n_.seedId = 0;\nfunction ClassCastException_0(){\n  RuntimeException_0.call(this);\n}\n\ndefineSeed(129, 34, makeCastMap([Q$Serializable, Q$Throwable]), ClassCastException_0);\nfunction IllegalArgumentException_0(message){\n  RuntimeException_1.call(this, message);\n}\n\ndefineSeed(132, 34, makeCastMap([Q$Serializable, Q$Throwable]), IllegalArgumentException_0);\nfunction IllegalStateException_0(){\n  RuntimeException_1.call(this, \"Can't overwrite cause\");\n}\n\ndefineSeed(133, 34, makeCastMap([Q$Serializable, Q$Throwable]), IllegalStateException_0);\nfunction IndexOutOfBoundsException_0(message){\n  RuntimeException_1.call(this, message);\n}\n\ndefineSeed(134, 34, makeCastMap([Q$Serializable, Q$Throwable]), IndexOutOfBoundsException_0);\nfunction toPowerOfTwoString(value_0){\n  var buf, digits, pos;\n  buf = initDim(_3C_classLit, makeCastMap([Q$Serializable]), -1, 8, 1);\n  digits = ($clinit_Number$__Digits() , digits_0);\n  pos = 7;\n  if (value_0 >= 0) {\n    while (value_0 > 15) {\n      buf[pos--] = digits[value_0 & 15];\n      value_0 >>= 4;\n    }\n  }\n   else {\n    while (pos > 0) {\n      buf[pos--] = digits[value_0 & 15];\n      value_0 >>= 4;\n    }\n  }\n  buf[pos] = digits[value_0 & 15];\n  return __valueOf(buf, pos, 8);\n}\n\nfunction max_0(y_0){\n  return 0 > y_0?0:y_0;\n}\n\nfunction random(){\n  return Math.random();\n}\n\nfunction NullPointerException_0(){\n  RuntimeException_0.call(this);\n}\n\nfunction NullPointerException_1(message){\n  RuntimeException_1.call(this, message);\n}\n\ndefineSeed(137, 34, makeCastMap([Q$Serializable, Q$Throwable]), NullPointerException_0, NullPointerException_1);\nfunction $clinit_Number$__Digits(){\n  $clinit_Number$__Digits = nullMethod;\n  digits_0 = initValues(_3C_classLit, makeCastMap([Q$Serializable]), -1, [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122]);\n}\n\nvar digits_0;\nfunction StackTraceElement_0(methodName){\n  this.className_0 = 'Unknown';\n  this.methodName = methodName;\n  this.lineNumber = -1;\n}\n\ndefineSeed(139, 1, makeCastMap([Q$Serializable, Q$StackTraceElement]), StackTraceElement_0);\n_.toString$ = function toString_6(){\n  return this.className_0 + '.' + this.methodName + '(Unknown Source' + (this.lineNumber >= 0?':' + this.lineNumber:'') + ')';\n}\n;\n_.lineNumber = 0;\nfunction $charAt(this$static, index_0){\n  return this$static.charCodeAt(index_0);\n}\n\nfunction $equals(this$static, other){\n  if (!instanceOf(other, Q$String)) {\n    return false;\n  }\n  return String(this$static) == other;\n}\n\nfunction $equalsIgnoreCase(this$static, other){\n  if (other == null)\n    return false;\n  return this$static == other || this$static.toLowerCase() == other.toLowerCase();\n}\n\nfunction $indexOf(this$static, str){\n  return this$static.indexOf(str);\n}\n\nfunction $lastIndexOf(this$static, str){\n  return this$static.lastIndexOf(str);\n}\n\nfunction $replaceAll(this$static, regex, replace){\n  replace = __translateReplaceString(replace);\n  return this$static.replace(RegExp(regex, 'g'), replace);\n}\n\nfunction $split(this$static, regex, maxMatch){\n  var compiled = new RegExp(regex, 'g');\n  var out = [];\n  var count = 0;\n  var trail = this$static;\n  var lastTrail = null;\n  while (true) {\n    var matchObj = compiled.exec(trail);\n    if (matchObj == null || trail == '' || count == maxMatch - 1 && maxMatch > 0) {\n      out[count] = trail;\n      break;\n    }\n     else {\n      out[count] = trail.substring(0, matchObj.index);\n      trail = trail.substring(matchObj.index + matchObj[0].length, trail.length);\n      compiled.lastIndex = 0;\n      if (lastTrail == trail) {\n        out[count] = trail.substring(0, 1);\n        trail = trail.substring(1);\n      }\n      lastTrail = trail;\n      count++;\n    }\n  }\n  if (maxMatch == 0 && this$static.length > 0) {\n    var lastNonEmpty = out.length;\n    while (lastNonEmpty > 0 && out[lastNonEmpty - 1] == '') {\n      --lastNonEmpty;\n    }\n    lastNonEmpty < out.length && out.splice(lastNonEmpty, out.length - lastNonEmpty);\n  }\n  var jr = __createArray(out.length);\n  for (var i = 0; i < out.length; ++i) {\n    jr[i] = out[i];\n  }\n  return jr;\n}\n\nfunction $substring(this$static, beginIndex){\n  return this$static.substr(beginIndex, this$static.length - beginIndex);\n}\n\nfunction $substring_0(this$static, beginIndex, endIndex){\n  return this$static.substr(beginIndex, endIndex - beginIndex);\n}\n\nfunction $trim(this$static){\n  if (this$static.length == 0 || this$static[0] > ' ' && this$static[this$static.length - 1] > ' ') {\n    return this$static;\n  }\n  var r1 = this$static.replace(/^(\\s*)/, '');\n  var r2 = r1.replace(/\\s*$/, '');\n  return r2;\n}\n\nfunction __createArray(numElements){\n  return initDim(_3Ljava_lang_String_2_classLit, makeCastMap([Q$Serializable]), Q$String, numElements, 0);\n}\n\nfunction __translateReplaceString(replaceStr){\n  var pos;\n  pos = 0;\n  while (0 <= (pos = replaceStr.indexOf('\\\\', pos))) {\n    replaceStr.charCodeAt(pos + 1) == 36?(replaceStr = $substring_0(replaceStr, 0, pos) + '$' + $substring(replaceStr, ++pos)):(replaceStr = $substring_0(replaceStr, 0, pos) + $substring(replaceStr, ++pos));\n  }\n  return replaceStr;\n}\n\nfunction __valueOf(x_0, start_0, end){\n  x_0 = x_0.slice(start_0, end);\n  return String.fromCharCode.apply(null, x_0);\n}\n\nfunction fromCharCode(ch_0){\n  return String.fromCharCode(ch_0);\n}\n\nfunction fromCodePoint(codePoint){\n  var hiSurrogate, loSurrogate;\n  if (codePoint >= 65536) {\n    hiSurrogate = 55296 + (codePoint - 65536 >> 10 & 1023) & 65535;\n    loSurrogate = 56320 + (codePoint - 65536 & 1023) & 65535;\n    return fromCharCode(hiSurrogate) + fromCharCode(loSurrogate);\n  }\n   else {\n    return String.fromCharCode(codePoint & 65535);\n  }\n}\n\n_ = String.prototype;\n_.castableTypeMap$ = makeCastMap([Q$String, Q$Serializable, Q$CharSequence, Q$Comparable]);\n_.equals$ = function equals_1(other){\n  return $equals(this, other);\n}\n;\n_.hashCode$ = function hashCode_2(){\n  return getHashCode_0(this);\n}\n;\n_.toString$ = _.toString;\nfunction $clinit_String$HashCache(){\n  $clinit_String$HashCache = nullMethod;\n  back_0 = {};\n  front = {};\n}\n\nfunction compute(str){\n  var hashCode, i, n, nBatch;\n  hashCode = 0;\n  n = str.length;\n  nBatch = n - 4;\n  i = 0;\n  while (i < nBatch) {\n    hashCode = str.charCodeAt(i + 3) + 31 * (str.charCodeAt(i + 2) + 31 * (str.charCodeAt(i + 1) + 31 * (str.charCodeAt(i) + 31 * hashCode))) | 0;\n    i += 4;\n  }\n  while (i < n) {\n    hashCode = hashCode * 31 + $charAt(str, i++);\n  }\n  return hashCode | 0;\n}\n\nfunction getHashCode_0(str){\n  $clinit_String$HashCache();\n  var key = ':' + str;\n  var result = front[key];\n  if (result != null) {\n    return result;\n  }\n  result = back_0[key];\n  result == null && (result = compute(str));\n  increment();\n  return front[key] = result;\n}\n\nfunction increment(){\n  if (count_0 == 256) {\n    back_0 = front;\n    front = {};\n    count_0 = 0;\n  }\n  ++count_0;\n}\n\nvar back_0, count_0 = 0, front;\nfunction StringBuffer_0(){\n  this.impl = new StringBufferImplAppend_0;\n}\n\ndefineSeed(141, 1, makeCastMap([Q$CharSequence]), StringBuffer_0);\n_.toString$ = function toString_7(){\n  return this.impl.string;\n}\n;\nfunction $append_0(this$static, x_0){\n  $append(this$static.impl, x_0);\n  return this$static;\n}\n\nfunction StringBuilder_0(){\n  this.impl = new StringBufferImplAppend_0;\n}\n\ndefineSeed(142, 1, makeCastMap([Q$CharSequence]), StringBuilder_0);\n_.toString$ = function toString_8(){\n  return this.impl.string;\n}\n;\nfunction $clinit_System(){\n  $clinit_System = nullMethod;\n  out_0 = new PrintStream_0;\n}\n\nvar out_0;\nfunction UnsupportedOperationException_0(){\n  RuntimeException_0.call(this);\n}\n\nfunction UnsupportedOperationException_1(message){\n  RuntimeException_1.call(this, message);\n}\n\ndefineSeed(144, 34, makeCastMap([Q$Serializable, Q$Throwable]), UnsupportedOperationException_0, UnsupportedOperationException_1);\nfunction $advanceToFind(iter, o){\n  var t;\n  while (iter.hasNext()) {\n    t = iter.next();\n    if (o == null?t == null:equals__devirtual$(o, t)) {\n      return iter;\n    }\n  }\n  return null;\n}\n\ndefineSeed(145, 1, {});\n_.add_0 = function add_0(o){\n  throw new UnsupportedOperationException_1('Add not supported on this collection');\n}\n;\n_.contains_0 = function contains(o){\n  var iter;\n  iter = $advanceToFind(this.iterator(), o);\n  return !!iter;\n}\n;\n_.toString$ = function toString_9(){\n  var comma, iter, sb, value_0;\n  sb = new StringBuffer_0;\n  comma = null;\n  $append(sb.impl, '[');\n  iter = this.iterator();\n  while (iter.hasNext()) {\n    comma != null?($append(sb.impl, comma) , sb):(comma = ', ');\n    value_0 = iter.next();\n    $append(sb.impl, value_0 === this?'(this Collection)':'' + value_0);\n  }\n  $append(sb.impl, ']');\n  return sb.impl.string;\n}\n;\nfunction $implFindEntry(this$static, key){\n  var entry, iter, k;\n  for (iter = new AbstractHashMap$EntrySetIterator_0((new AbstractHashMap$EntrySet_0(this$static)).this$0); $hasNext(iter.iter);) {\n    entry = dynamicCast($next(iter.iter), Q$Map$Entry);\n    k = entry.getKey();\n    if (key == null?k == null:equals__devirtual$(key, k)) {\n      return entry;\n    }\n  }\n  return null;\n}\n\nfunction $values(this$static){\n  var entrySet;\n  entrySet = new AbstractHashMap$EntrySet_0(this$static);\n  return new AbstractMap$2_0(this$static, entrySet);\n}\n\ndefineSeed(147, 1, makeCastMap([Q$Map]));\n_.equals$ = function equals_2(obj){\n  var entry, entry$iterator, otherKey, otherMap, otherValue;\n  if (obj === this) {\n    return true;\n  }\n  if (!instanceOf(obj, Q$Map)) {\n    return false;\n  }\n  otherMap = dynamicCast(obj, Q$Map);\n  if (this.size_0 != otherMap.size_1()) {\n    return false;\n  }\n  for (entry$iterator = otherMap.entrySet_0().iterator(); entry$iterator.hasNext();) {\n    entry = dynamicCast(entry$iterator.next(), Q$Map$Entry);\n    otherKey = entry.getKey();\n    otherValue = entry.getValue();\n    if (!(otherKey == null?this.nullSlotLive:instanceOf(otherKey, Q$String)?$hasStringValue(this, dynamicCast(otherKey, Q$String)):$hasHashValue(this, otherKey, ~~hashCode__devirtual$(otherKey)))) {\n      return false;\n    }\n    if (!equalsWithNullCheck(otherValue, otherKey == null?this.nullSlot:instanceOf(otherKey, Q$String)?$getStringValue(this, dynamicCast(otherKey, Q$String)):$getHashValue(this, otherKey, ~~hashCode__devirtual$(otherKey)))) {\n      return false;\n    }\n  }\n  return true;\n}\n;\n_.get_0 = function get_0(key){\n  var entry;\n  entry = $implFindEntry(this, key);\n  return !entry?null:entry.getValue();\n}\n;\n_.hashCode$ = function hashCode_3(){\n  var entry, entry$iterator, hashCode;\n  hashCode = 0;\n  for (entry$iterator = new AbstractHashMap$EntrySetIterator_0((new AbstractHashMap$EntrySet_0(this)).this$0); $hasNext(entry$iterator.iter);) {\n    entry = dynamicCast($next(entry$iterator.iter), Q$Map$Entry);\n    hashCode += entry.hashCode$();\n    hashCode = ~~hashCode;\n  }\n  return hashCode;\n}\n;\n_.put = function put(key, value_0){\n  throw new UnsupportedOperationException_1('Put not supported on this map');\n}\n;\n_.size_1 = function size_1(){\n  return (new AbstractHashMap$EntrySet_0(this)).this$0.size_0;\n}\n;\n",
"_.toString$ = function toString_10(){\n  var comma, entry, iter, s;\n  s = '{';\n  comma = false;\n  for (iter = new AbstractHashMap$EntrySetIterator_0((new AbstractHashMap$EntrySet_0(this)).this$0); $hasNext(iter.iter);) {\n    entry = dynamicCast($next(iter.iter), Q$Map$Entry);\n    comma?(s += ', '):(comma = true);\n    s += '' + entry.getKey();\n    s += '=';\n    s += '' + entry.getValue();\n  }\n  return s + '}';\n}\n;\nfunction $addAllHashEntries(this$static, dest){\n  var hashCodeMap = this$static.hashCodeMap;\n  for (var hashCode in hashCodeMap) {\n    var hashCodeInt = parseInt(hashCode, 10);\n    if (hashCode == hashCodeInt) {\n      var array = hashCodeMap[hashCodeInt];\n      for (var i = 0, c = array.length; i < c; ++i) {\n        dest.add_0(array[i]);\n      }\n    }\n  }\n}\n\nfunction $addAllStringEntries(this$static, dest){\n  var stringMap = this$static.stringMap;\n  for (var key in stringMap) {\n    if (key.charCodeAt(0) == 58) {\n      var entry = new AbstractHashMap$MapEntryString_0(this$static, key.substring(1));\n      dest.add_0(entry);\n    }\n  }\n}\n\nfunction $containsHashValue(this$static, value_0){\n  var hashCodeMap = this$static.hashCodeMap;\n  for (var hashCode in hashCodeMap) {\n    var hashCodeInt = parseInt(hashCode, 10);\n    if (hashCode == hashCodeInt) {\n      var array = hashCodeMap[hashCodeInt];\n      for (var i = 0, c = array.length; i < c; ++i) {\n        var entry = array[i];\n        var entryValue = entry.getValue();\n        if (this$static.equalsBridge(value_0, entryValue)) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\nfunction $containsKey(this$static, key){\n  return key == null?this$static.nullSlotLive:instanceOf(key, Q$String)?$hasStringValue(this$static, dynamicCast(key, Q$String)):$hasHashValue(this$static, key, ~~hashCode__devirtual$(key));\n}\n\nfunction $containsStringValue(this$static, value_0){\n  var stringMap = this$static.stringMap;\n  for (var key in stringMap) {\n    if (key.charCodeAt(0) == 58) {\n      var entryValue = stringMap[key];\n      if (this$static.equalsBridge(value_0, entryValue)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nfunction $containsValue(this$static, value_0){\n  if (this$static.nullSlotLive && $equals_0(this$static.nullSlot, value_0)) {\n    return true;\n  }\n   else if ($containsStringValue(this$static, value_0)) {\n    return true;\n  }\n   else if ($containsHashValue(this$static, value_0)) {\n    return true;\n  }\n  return false;\n}\n\nfunction $get(this$static, key){\n  return key == null?this$static.nullSlot:instanceOf(key, Q$String)?$getStringValue(this$static, dynamicCast(key, Q$String)):$getHashValue(this$static, key, ~~hashCode__devirtual$(key));\n}\n\nfunction $getHashValue(this$static, key, hashCode){\n  var array = this$static.hashCodeMap[hashCode];\n  if (array) {\n    for (var i = 0, c = array.length; i < c; ++i) {\n      var entry = array[i];\n      var entryKey = entry.getKey();\n      if (this$static.equalsBridge(key, entryKey)) {\n        return entry.getValue();\n      }\n    }\n  }\n  return null;\n}\n\nfunction $getStringValue(this$static, key){\n  return this$static.stringMap[':' + key];\n}\n\nfunction $hasHashValue(this$static, key, hashCode){\n  var array = this$static.hashCodeMap[hashCode];\n  if (array) {\n    for (var i = 0, c = array.length; i < c; ++i) {\n      var entry = array[i];\n      var entryKey = entry.getKey();\n      if (this$static.equalsBridge(key, entryKey)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nfunction $hasStringValue(this$static, key){\n  return ':' + key in this$static.stringMap;\n}\n\nfunction $put(this$static, key, value_0){\n  return key == null?$putNullSlot(this$static, value_0):instanceOf(key, Q$String)?$putStringValue(this$static, dynamicCast(key, Q$String), value_0):$putHashValue(this$static, key, value_0, ~~hashCode__devirtual$(key));\n}\n\nfunction $putHashValue(this$static, key, value_0, hashCode){\n  var array = this$static.hashCodeMap[hashCode];\n  if (array) {\n    for (var i = 0, c = array.length; i < c; ++i) {\n      var entry = array[i];\n      var entryKey = entry.getKey();\n      if (this$static.equalsBridge(key, entryKey)) {\n        var previous = entry.getValue();\n        entry.setValue(value_0);\n        return previous;\n      }\n    }\n  }\n   else {\n    array = this$static.hashCodeMap[hashCode] = [];\n  }\n  var entry = new MapEntryImpl_0(key, value_0);\n  array.push(entry);\n  ++this$static.size_0;\n  return null;\n}\n\nfunction $putNullSlot(this$static, value_0){\n  var result;\n  result = this$static.nullSlot;\n  this$static.nullSlot = value_0;\n  if (!this$static.nullSlotLive) {\n    this$static.nullSlotLive = true;\n    ++this$static.size_0;\n  }\n  return result;\n}\n\nfunction $putStringValue(this$static, key, value_0){\n  var result, stringMap = this$static.stringMap;\n  key = ':' + key;\n  key in stringMap?(result = stringMap[key]):++this$static.size_0;\n  stringMap[key] = value_0;\n  return result;\n}\n\ndefineSeed(146, 147, makeCastMap([Q$Map]));\n_.entrySet_0 = function entrySet_0(){\n  return new AbstractHashMap$EntrySet_0(this);\n}\n;\n_.equalsBridge = function equalsBridge(value1, value2){\n  return maskUndefined(value1) === maskUndefined(value2) || value1 != null && equals__devirtual$(value1, value2);\n}\n;\n_.get_0 = function get_1(key){\n  return $get(this, key);\n}\n;\n_.put = function put_0(key, value_0){\n  return $put(this, key, value_0);\n}\n;\n_.size_1 = function size_2(){\n  return this.size_0;\n}\n;\n_.nullSlotLive = false;\n_.size_0 = 0;\ndefineSeed(149, 145, makeCastMap([Q$Set]));\n_.equals$ = function equals_3(o){\n  var iter, other, otherItem;\n  if (o === this) {\n    return true;\n  }\n  if (!instanceOf(o, Q$Set)) {\n    return false;\n  }\n  other = dynamicCast(o, Q$Set);\n  if (other.size_1() != this.size_1()) {\n    return false;\n  }\n  for (iter = other.iterator(); iter.hasNext();) {\n    otherItem = iter.next();\n    if (!this.contains_0(otherItem)) {\n      return false;\n    }\n  }\n  return true;\n}\n;\n_.hashCode$ = function hashCode_4(){\n  var hashCode, iter, next;\n  hashCode = 0;\n  for (iter = this.iterator(); iter.hasNext();) {\n    next = iter.next();\n    if (next != null) {\n      hashCode += hashCode__devirtual$(next);\n      hashCode = ~~hashCode;\n    }\n  }\n  return hashCode;\n}\n;\nfunction AbstractHashMap$EntrySet_0(this$0){\n  this.this$0 = this$0;\n}\n\ndefineSeed(148, 149, makeCastMap([Q$Set]), AbstractHashMap$EntrySet_0);\n_.contains_0 = function contains_0(o){\n  var entry, key, value_0;\n  if (instanceOf(o, Q$Map$Entry)) {\n    entry = dynamicCast(o, Q$Map$Entry);\n    key = entry.getKey();\n    if ($containsKey(this.this$0, key)) {\n      value_0 = $get(this.this$0, key);\n      return $equals_0(entry.getValue(), value_0);\n    }\n  }\n  return false;\n}\n;\n_.iterator = function iterator_0(){\n  return new AbstractHashMap$EntrySetIterator_0(this.this$0);\n}\n;\n_.size_1 = function size_3(){\n  return this.this$0.size_0;\n}\n;\nfunction AbstractHashMap$EntrySetIterator_0(this$0){\n  var list;\n  list = new ArrayList_0;\n  this$0.nullSlotLive && $add_0(list, new AbstractHashMap$MapEntryNull_0(this$0));\n  $addAllStringEntries(this$0, list);\n  $addAllHashEntries(this$0, list);\n  this.iter = new AbstractList$IteratorImpl_0(list);\n}\n\ndefineSeed(150, 1, {}, AbstractHashMap$EntrySetIterator_0);\n_.hasNext = function hasNext(){\n  return $hasNext(this.iter);\n}\n;\n_.next = function next_0(){\n  return dynamicCast($next(this.iter), Q$Map$Entry);\n}\n;\ndefineSeed(152, 1, makeCastMap([Q$Map$Entry]));\n_.equals$ = function equals_4(other){\n  var entry;\n  if (instanceOf(other, Q$Map$Entry)) {\n    entry = dynamicCast(other, Q$Map$Entry);\n    if (equalsWithNullCheck(this.getKey(), entry.getKey()) && equalsWithNullCheck(this.getValue(), entry.getValue())) {\n      return true;\n    }\n  }\n  return false;\n}\n;\n_.hashCode$ = function hashCode_5(){\n  var keyHash, valueHash;\n  keyHash = 0;\n  valueHash = 0;\n  this.getKey() != null && (keyHash = hashCode__devirtual$(this.getKey()));\n  this.getValue() != null && (valueHash = hashCode__devirtual$(this.getValue()));\n  return keyHash ^ valueHash;\n}\n;\n_.toString$ = function toString_11(){\n  return this.getKey() + '=' + this.getValue();\n}\n;\nfunction AbstractHashMap$MapEntryNull_0(this$0){\n  this.this$0 = this$0;\n}\n\ndefineSeed(151, 152, makeCastMap([Q$Map$Entry]), AbstractHashMap$MapEntryNull_0);\n_.getKey = function getKey(){\n  return null;\n}\n;\n_.getValue = function getValue(){\n  return this.this$0.nullSlot;\n}\n;\n_.setValue = function setValue(object){\n  return $putNullSlot(this.this$0, object);\n}\n;\nfunction AbstractHashMap$MapEntryString_0(this$0, key){\n  this.this$0 = this$0;\n  this.key = key;\n}\n\ndefineSeed(153, 152, makeCastMap([Q$Map$Entry]), AbstractHashMap$MapEntryString_0);\n_.getKey = function getKey_0(){\n  return this.key;\n}\n;\n_.getValue = function getValue_0(){\n  return $getStringValue(this.this$0, this.key);\n}\n;\n_.setValue = function setValue_0(object){\n  return $putStringValue(this.this$0, this.key, object);\n}\n;\nfunction checkIndex(index_0, size_0){\n  (index_0 < 0 || index_0 >= size_0) && indexOutOfBounds(index_0, size_0);\n}\n\nfunction indexOutOfBounds(index_0, size_0){\n  throw new IndexOutOfBoundsException_0('Index: ' + index_0 + ', Size: ' + size_0);\n}\n\ndefineSeed(154, 145, makeCastMap([Q$List]));\n_.add_0 = function add_1(obj){\n  $add(this, this.size_1(), obj);\n  return true;\n}\n;\n_.equals$ = function equals_5(o){\n  var elem, elemOther, iter, iterOther, other;\n  if (o === this) {\n    return true;\n  }\n  if (!instanceOf(o, Q$List)) {\n    return false;\n  }\n  other = dynamicCast(o, Q$List);\n  if (this.size_1() != other.size_1()) {\n    return false;\n  }\n  iter = new AbstractList$IteratorImpl_0(this);\n  iterOther = other.iterator();\n  while (iter.i < iter.this$0.size_0) {\n    elem = $next(iter);\n    elemOther = iterOther.next();\n    if (!(elem == null?elemOther == null:equals__devirtual$(elem, elemOther))) {\n      return false;\n    }\n  }\n  return true;\n}\n;\n_.hashCode$ = function hashCode_6(){\n  var iter, k, obj;\n  k = 1;\n  iter = new AbstractList$IteratorImpl_0(this);\n  while (iter.i < iter.this$0.size_0) {\n    obj = $next(iter);\n    k = 31 * k + (obj == null?0:hashCode__devirtual$(obj));\n    k = ~~k;\n  }\n  return k;\n}\n;\n_.iterator = function iterator_1(){\n  return new AbstractList$IteratorImpl_0(this);\n}\n;\nfunction $hasNext(this$static){\n  return this$static.i < this$static.this$0.size_0;\n}\n\nfunction $next(this$static){\n  if (this$static.i >= this$static.this$0.size_0) {\n    throw new NoSuchElementException_0;\n  }\n  return $get_0(this$static.this$0, this$static.i++);\n}\n\nfunction AbstractList$IteratorImpl_0(this$0){\n  this.this$0 = this$0;\n}\n\ndefineSeed(155, 1, {}, AbstractList$IteratorImpl_0);\n_.hasNext = function hasNext_0(){\n  return $hasNext(this);\n}\n;\n_.next = function next_1(){\n  return $next(this);\n}\n;\n_.i = 0;\nfunction $iterator(this$static){\n  var outerIter;\n  outerIter = new AbstractHashMap$EntrySetIterator_0(this$static.val$entrySet.this$0);\n  return new AbstractMap$2$1_0(outerIter);\n}\n\nfunction AbstractMap$2_0(this$0, val$entrySet){\n  this.this$0 = this$0;\n  this.val$entrySet = val$entrySet;\n}\n\ndefineSeed(156, 145, {}, AbstractMap$2_0);\n_.contains_0 = function contains_1(value_0){\n  return $containsValue(this.this$0, value_0);\n}\n;\n_.iterator = function iterator_2(){\n  return $iterator(this);\n}\n;\n_.size_1 = function size_4(){\n  return this.val$entrySet.this$0.size_0;\n}\n;\nfunction $next_0(this$static){\n  var value_0;\n  value_0 = dynamicCast($next(this$static.val$outerIter.iter), Q$Map$Entry).getValue();\n  return value_0;\n}\n\nfunction AbstractMap$2$1_0(val$outerIter){\n  this.val$outerIter = val$outerIter;\n}\n\ndefineSeed(157, 1, {}, AbstractMap$2$1_0);\n_.hasNext = function hasNext_1(){\n  return $hasNext(this.val$outerIter.iter);\n}\n;\n_.next = function next_2(){\n  return $next_0(this);\n}\n;\nfunction $add(this$static, index_0, o){\n  (index_0 < 0 || index_0 > this$static.size_0) && indexOutOfBounds(index_0, this$static.size_0);\n  splice(this$static.array, index_0, 0, o);\n  ++this$static.size_0;\n}\n\nfunction $add_0(this$static, o){\n  setCheck(this$static.array, this$static.size_0++, o);\n  return true;\n}\n\nfunction $get_0(this$static, index_0){\n  checkIndex(index_0, this$static.size_0);\n  return this$static.array[index_0];\n}\n\nfunction $indexOf_0(this$static, o, index_0){\n  for (; index_0 < this$static.size_0; ++index_0) {\n    if (equalsWithNullCheck(o, this$static.array[index_0])) {\n      return index_0;\n    }\n  }\n  return -1;\n}\n\nfunction $toArray(this$static, out){\n  var i;\n  out.length < this$static.size_0 && (out = createFrom(out, this$static.size_0));\n  for (i = 0; i < this$static.size_0; ++i) {\n    setCheck(out, i, this$static.array[i]);\n  }\n  out.length > this$static.size_0 && setCheck(out, this$static.size_0, null);\n  return out;\n}\n\nfunction ArrayList_0(){\n  this.array = initDim(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable]), Q$Object, 0, 0);\n}\n\nfunction splice(array, index_0, deleteCount, value_0){\n  array.splice(index_0, deleteCount, value_0);\n}\n\ndefineSeed(158, 154, makeCastMap([Q$Serializable, Q$List, Q$RandomAccess]), ArrayList_0);\n_.add_0 = function add_2(o){\n  return $add_0(this, o);\n}\n;\n_.contains_0 = function contains_2(o){\n  return $indexOf_0(this, o, 0) != -1;\n}\n;\n_.get_1 = function get_2(index_0){\n  return $get_0(this, index_0);\n}\n;\n_.size_1 = function size_5(){\n  return this.size_0;\n}\n;\n_.size_0 = 0;\nfunction unmodifiableList(list){\n  return instanceOf(list, Q$RandomAccess)?new Collections$UnmodifiableRandomAccessList_0(list):new Collections$UnmodifiableList_0(list);\n}\n\nfunction Collections$UnmodifiableCollection_0(coll){\n  this.coll = coll;\n}\n\ndefineSeed(160, 1, {});\n_.add_0 = function add_3(o){\n  throw new UnsupportedOperationException_0;\n}\n;\n_.iterator = function iterator_3(){\n  return new Collections$UnmodifiableCollectionIterator_0(this.coll.iterator());\n}\n;\n_.size_1 = function size_6(){\n  return this.coll.size_1();\n}\n;\n_.toString$ = function toString_12(){\n  return this.coll.toString$();\n}\n;\nfunction Collections$UnmodifiableCollectionIterator_0(it){\n  this.it = it;\n}\n\ndefineSeed(161, 1, {}, Collections$UnmodifiableCollectionIterator_0);\n_.hasNext = function hasNext_2(){\n  return this.it.hasNext();\n}\n;\n_.next = function next_3(){\n  return this.it.next();\n}\n;\nfunction Collections$UnmodifiableList_0(list){\n  Collections$UnmodifiableCollection_0.call(this, list);\n  this.list = list;\n}\n\ndefineSeed(162, 160, makeCastMap([Q$List]), Collections$UnmodifiableList_0);\n_.equals$ = function equals_6(o){\n  return this.list.equals$(o);\n}\n;\n_.get_1 = function get_3(index_0){\n  return this.list.get_1(index_0);\n}\n;\n_.hashCode$ = function hashCode_7(){\n  return this.list.hashCode$();\n}\n;\nfunction Collections$UnmodifiableMap_0(map_0){\n  this.map_0 = map_0;\n}\n\ndefineSeed(163, 1, makeCastMap([Q$Map]), Collections$UnmodifiableMap_0);\n_.entrySet_0 = function entrySet_1(){\n  !this.entrySet && (this.entrySet = new Collections$UnmodifiableMap$UnmodifiableEntrySet_0(this.map_0.entrySet_0()));\n  return this.entrySet;\n}\n;\n_.equals$ = function equals_7(o){\n  return this.map_0.equals$(o);\n}\n;\n_.get_0 = function get_4(key){\n  return this.map_0.get_0(key);\n}\n;\n_.hashCode$ = function hashCode_8(){\n  return this.map_0.hashCode$();\n}\n;\n_.put = function put_1(key, value_0){\n  throw new UnsupportedOperationException_0;\n}\n;\n_.size_1 = function size_7(){\n  return this.map_0.size_1();\n}\n;\n_.toString$ = function toString_13(){\n  return this.map_0.toString$();\n}\n;\ndefineSeed(165, 160, makeCastMap([Q$Set]));\n_.equals$ = function equals_8(o){\n  return this.coll.equals$(o);\n}\n;\n_.hashCode$ = function hashCode_9(){\n  return this.coll.hashCode$();\n}\n;\nfunction Collections$UnmodifiableMap$UnmodifiableEntrySet_0(s){\n  Collections$UnmodifiableCollection_0.call(this, s);\n}\n\ndefineSeed(164, 165, makeCastMap([Q$Set]), Collections$UnmodifiableMap$UnmodifiableEntrySet_0);\n_.iterator = function iterator_4(){\n  var it;\n  it = this.coll.iterator();\n  return new Collections$UnmodifiableMap$UnmodifiableEntrySet$1_0(it);\n}\n;\nfunction Collections$UnmodifiableMap$UnmodifiableEntrySet$1_0(val$it){\n  this.val$it = val$it;\n}\n\ndefineSeed(166, 1, {}, Collections$UnmodifiableMap$UnmodifiableEntrySet$1_0);\n_.hasNext = function hasNext_3(){\n  return this.val$it.hasNext();\n}\n;\n_.next = function next_4(){\n  return new Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry_0(dynamicCast(this.val$it.next(), Q$Map$Entry));\n}\n;\nfunction Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry_0(entry){\n  this.entry = entry;\n}\n\ndefineSeed(167, 1, makeCastMap([Q$Map$Entry]), Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry_0);\n_.equals$ = function equals_9(o){\n  return this.entry.equals$(o);\n}\n;\n_.getKey = function getKey_1(){\n  return this.entry.getKey();\n}\n;\n_.getValue = function getValue_1(){\n  return this.entry.getValue();\n}\n;\n_.hashCode$ = function hashCode_10(){\n  return this.entry.hashCode$();\n}\n;\n_.setValue = function setValue_1(value_0){\n  throw new UnsupportedOperationException_0;\n}\n;\n_.toString$ = function toString_14(){\n  return this.entry.toString$();\n}\n;\nfunction Collections$UnmodifiableRandomAccessList_0(list){\n  Collections$UnmodifiableList_0.call(this, list);\n}\n\ndefineSeed(168, 162, makeCastMap([Q$List, Q$RandomAccess]), Collections$UnmodifiableRandomAccessList_0);\nfunction $toString(this$static){\n  var hourOffset, minuteOffset, offset;\n  offset = -this$static.jsdate.getTimezoneOffset();\n  hourOffset = (offset >= 0?'+':'') + ~~(offset / 60);\n  minuteOffset = (offset < 0?-offset:offset) % 60 < 10?'0' + (offset < 0?-offset:offset) % 60:'' + (offset < 0?-offset:offset) % 60;\n  return ($clinit_Date$StringData() , DAYS)[this$static.jsdate.getDay()] + ' ' + MONTHS[this$static.jsdate.getMonth()] + ' ' + padTwo(this$static.jsdate.getDate()) + ' ' + padTwo(this$static.jsdate.getHours()) + ':' + padTwo(this$static.jsdate.getMinutes()) + ':' + padTwo(this$static.jsdate.getSeconds()) + ' GMT' + hourOffset + minuteOffset + ' ' + this$static.jsdate.getFullYear();\n}\n\nfunction Date_1(){\n  this.jsdate = new Date;\n}\n\nfunction Date_2(date){\n  this.jsdate = create(toDouble(date));\n}\n\nfunction padTwo(number){\n  return number < 10?'0' + number:'' + number;\n}\n\ndefineSeed(169, 1, makeCastMap([Q$Serializable, Q$Comparable, Q$Date]), Date_1, Date_2);\n_.equals$ = function equals_10(obj){\n  return instanceOf(obj, Q$Date) && eq(fromDouble(this.jsdate.getTime()), fromDouble(dynamicCast(obj, Q$Date).jsdate.getTime()));\n}\n;\n_.hashCode$ = function hashCode_11(){\n  var time;\n  time = fromDouble(this.jsdate.getTime());\n  return toInt(xor(time, shru(time, 32)));\n}\n;\n_.toString$ = function toString_15(){\n  return $toString(this);\n}\n;\nfunction $clinit_Date$StringData(){\n  $clinit_Date$StringData = nullMethod;\n  DAYS = initValues(_3Ljava_lang_String_2_classLit, makeCastMap([Q$Serializable]), Q$String, ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']);\n  MONTHS = initValues(_3Ljava_lang_String_2_classLit, makeCastMap([Q$Serializable]), Q$String, ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']);\n}\n\nvar DAYS, MONTHS;\nfunction $equals_0(value1, value2){\n  return maskUndefined(value1) === maskUndefined(value2) || value1 != null && equals__devirtual$(value1, value2);\n}\n\nfunction HashMap_0(){\n  this.hashCodeMap = [];\n  this.stringMap = {};\n  this.nullSlotLive = false;\n  this.nullSlot = null;\n  this.size_0 = 0;\n}\n\ndefineSeed(171, 146, makeCastMap([Q$Serializable, Q$Map]), HashMap_0);\nfunction MapEntryImpl_0(key, value_0){\n  this.key = key;\n  this.value_0 = value_0;\n}\n\ndefineSeed(172, 152, makeCastMap([Q$Map$Entry]), MapEntryImpl_0);\n_.getKey = function getKey_2(){\n  return this.key;\n}\n;\n_.getValue = function getValue_2(){\n  return this.value_0;\n}\n;\n_.setValue = function setValue_2(value_0){\n  var old;\n  old = this.value_0;\n  this.value_0 = value_0;\n  return old;\n}\n;\nfunction NoSuchElementException_0(){\n  RuntimeException_0.call(this);\n}\n\ndefineSeed(173, 34, makeCastMap([Q$Serializable, Q$Throwable]), NoSuchElementException_0);\nfunction equalsWithNullCheck(a, b){\n  return maskUndefined(a) === maskUndefined(b) || a != null && equals__devirtual$(a, b);\n}\n\nfunction $clinit_Level(){\n  $clinit_Level = nullMethod;\n  ALL = new Level$LevelAll_0;\n  CONFIG = new Level$LevelConfig_0;\n  FINE = new Level$LevelFine_0;\n  FINER = new Level$LevelFiner_0;\n  FINEST = new Level$LevelFinest_0;\n  INFO = new Level$LevelInfo_0;\n  OFF = new Level$LevelOff_0;\n  SEVERE = new Level$LevelSevere_0;\n  WARNING = new Level$LevelWarning_0;\n}\n\ndefineSeed(175, 1, makeCastMap([Q$Serializable]));\n_.getName = function getName(){\n  return 'DUMMY';\n}\n;\n_.intValue = function intValue(){\n  return -1;\n}\n;\n_.toString$ = function toString_16(){\n  return this.getName();\n}\n;\nvar ALL, CONFIG, FINE, FINER, FINEST, INFO, OFF, SEVERE, WARNING;\nfunction Level$LevelAll_0(){\n}\n\ndefineSeed(176, 175, makeCastMap([Q$Serializable]), Level$LevelAll_0);\n_.getName = function getName_0(){\n  return 'ALL';\n}\n;\n_.intValue = function intValue_0(){\n  return -2147483648;\n}\n;\nfunction Level$LevelConfig_0(){\n}\n\ndefineSeed(177, 175, makeCastMap([Q$Serializable]), Level$LevelConfig_0);\n_.getName = function getName_1(){\n  return 'CONFIG';\n}\n;\n_.intValue = function intValue_1(){\n  return 700;\n}\n;\nfunction Level$LevelFine_0(){\n}\n\ndefineSeed(178, 175, makeCastMap([Q$Serializable]), Level$LevelFine_0);\n_.getName = function getName_2(){\n  return 'FINE';\n}\n;\n_.intValue = function intValue_2(){\n  return 500;\n}\n;\nfunction Level$LevelFiner_0(){\n}\n\ndefineSeed(179, 175, makeCastMap([Q$Serializable]), Level$LevelFiner_0);\n_.getName = function getName_3(){\n  return 'FINER';\n}\n;\n_.intValue = function intValue_3(){\n  return 400;\n}\n;\nfunction Level$LevelFinest_0(){\n}\n\ndefineSeed(180, 175, makeCastMap([Q$Serializable]), Level$LevelFinest_0);\n_.getName = function getName_4(){\n  return 'FINEST';\n}\n;\n_.intValue = function intValue_4(){\n  return 300;\n}\n;\nfunction Level$LevelInfo_0(){\n}\n\ndefineSeed(181, 175, makeCastMap([Q$Serializable]), Level$LevelInfo_0);\n_.getName = function getName_5(){\n  return 'INFO';\n}\n;\n_.intValue = function intValue_5(){\n  return 800;\n}\n;\nfunction Level$LevelOff_0(){\n}\n\ndefineSeed(182, 175, makeCastMap([Q$Serializable]), Level$LevelOff_0);\n_.getName = function getName_6(){\n  return 'OFF';\n}\n;\n_.intValue = function intValue_6(){\n  return 2147483647;\n}\n;\nfunction Level$LevelSevere_0(){\n}\n\ndefineSeed(183, 175, makeCastMap([Q$Serializable]), Level$LevelSevere_0);\n_.getName = function getName_7(){\n  return 'SEVERE';\n}\n;\n_.intValue = function intValue_7(){\n  return 1000;\n}\n;\nfunction Level$LevelWarning_0(){\n}\n\ndefineSeed(184, 175, makeCastMap([Q$Serializable]), Level$LevelWarning_0);\n_.getName = function getName_8(){\n  return 'WARNING';\n}\n;\n_.intValue = function intValue_8(){\n  return 900;\n}\n;\nfunction $addLogger(this$static, logger){\n  if ($getLogger(this$static, logger.impl.name_0)) {\n    return false;\n  }\n  $addLoggerWithoutDuplicationChecking(this$static, logger);\n  return true;\n}\n\nfunction $addLoggerWithoutDuplicationChecking(this$static, logger){\n  var name_0, parent_0, parentName;\n  name_0 = logger.impl.name_0;\n  parentName = $substring_0(name_0, 0, max_0($lastIndexOf(name_0, fromCodePoint(46))));\n  parent_0 = $getOrAddLogger(this$static, parentName);\n  $put(this$static.loggerList, logger.impl.name_0, logger);\n  $setParent(logger.impl, parent_0);\n}\n\nfunction $getLogger(this$static, name_0){\n  return dynamicCast($get(this$static.loggerList, name_0), Q$Logger);\n}\n\nfunction $getOrAddLogger(this$static, name_0){\n  var logger, newLogger;\n  logger = dynamicCast($get(this$static.loggerList, name_0), Q$Logger);\n  if (!logger) {\n    newLogger = new Logger_0(name_0);\n    $addLoggerWithoutDuplicationChecking(this$static, newLogger);\n    return newLogger;\n  }\n  return logger;\n}\n\nfunction LogManager_0(){\n  this.loggerList = new HashMap_0;\n  this.rootLogger = new LogManager$RootLogger_0;\n  $put(this.loggerList, '', this.rootLogger);\n}\n\ndefineSeed(185, 1, {}, LogManager_0);\nvar singleton;\nfunction LogManager$RootLogger_0(){\n  $clinit_Logger();\n  Logger_0.call(this, '');\n  $setLevel_1(this, ($clinit_Level() , ALL));\n}\n\ndefineSeed(186, 107, makeCastMap([Q$Logger]), LogManager$RootLogger_0);\nfunction $setLoggerName(this$static, newName){\n  this$static.loggerName = newName;\n}\n\nfunction LogRecord_0(level, msg){\n  this.level = level;\n  this.msg = msg;\n  this.millis = fromDouble((new Date_1).jsdate.getTime());\n}\n\ndefineSeed(187, 1, makeCastMap([Q$Serializable]), LogRecord_0);\n_.loggerName = '';\n_.millis = P0_longLit;\n_.thrown = null;\nvar $entry = registerEntry();\nfunction gwtOnLoad(errFn, modName, modBase, softPermutationId){\n  $moduleName = modName;\n  $moduleBase = modBase;\n  if (errFn)\n    try {\n      $entry(init)();\n    }\n     catch (e) {\n      errFn(modName);\n    }\n   else {\n    $entry(init)();\n  }\n}\n\n",
"var Ljava_lang_Object_2_classLit = createForClass('java.lang.', 'Object', 1), Lcom_github_rma350_kidneyx_web_client_KidneyXWeb_2_classLit = createForClass('com.github.rma350.kidneyx.web.client.', 'KidneyXWeb', 19), Lcom_google_gwt_core_client_JavaScriptObject_2_classLit = createForClass('com.google.gwt.core.client.', 'JavaScriptObject$', 23), Lcom_google_gwt_core_client_Scheduler_2_classLit = createForClass('com.google.gwt.core.client.', 'Scheduler', 41), _3I_classLit = createForArray('', '[I', 193), _3Ljava_lang_Object_2_classLit = createForArray('[Ljava.lang.', 'Object;', 191), Ljava_lang_Throwable_2_classLit = createForClass('java.lang.', 'Throwable', 36), Ljava_lang_Exception_2_classLit = createForClass('java.lang.', 'Exception', 35), Ljava_lang_RuntimeException_2_classLit = createForClass('java.lang.', 'RuntimeException', 34), Ljava_lang_StackTraceElement_2_classLit = createForClass('java.lang.', 'StackTraceElement', 139), _3Ljava_lang_StackTraceElement_2_classLit = createForArray('[Ljava.lang.', 'StackTraceElement;', 194), _3Lcom_google_gwt_lang_LongLibBase$LongEmul_2_classLit = createForArray('[Lcom.google.gwt.lang.', 'LongLibBase$LongEmul;', 195), Lcom_google_gwt_lang_SeedUtil_2_classLit = createForClass('com.google.gwt.lang.', 'SeedUtil', 82), Lcom_google_gwt_logging_client_LogConfiguration_2_classLit = createForClass('com.google.gwt.logging.client.', 'LogConfiguration', null), Lcom_google_gwt_logging_client_LogConfiguration$LogConfigurationImplRegular_2_classLit = createForClass('com.google.gwt.logging.client.', 'LogConfiguration$LogConfigurationImplRegular', 100), Lcom_google_gwt_logging_client_LogConfiguration$1_2_classLit = createForClass('com.google.gwt.logging.client.', 'LogConfiguration$1', 99), Ljava_lang_Enum_2_classLit = createForClass('java.lang.', 'Enum', 61), _3C_classLit = createForArray('', '[C', 196), Ljava_lang_Class_2_classLit = createForClass('java.lang.', 'Class', 128), Ljava_lang_String_2_classLit = createForClass('java.lang.', 'String', 2), _3Ljava_lang_String_2_classLit = createForArray('[Ljava.lang.', 'String;', 192), Ljava_lang_ClassCastException_2_classLit = createForClass('java.lang.', 'ClassCastException', 129), Lcom_google_gwt_core_client_JavaScriptException_2_classLit = createForClass('com.google.gwt.core.client.', 'JavaScriptException', 33), Ljava_lang_StringBuilder_2_classLit = createForClass('java.lang.', 'StringBuilder', 142), Ljava_lang_ArrayStoreException_2_classLit = createForClass('java.lang.', 'ArrayStoreException', 127), Ljava_util_logging_Logger_2_classLit = createForClass('java.util.logging.', 'Logger', 107), Ljava_lang_NullPointerException_2_classLit = createForClass('java.lang.', 'NullPointerException', 137), Ljava_lang_IllegalArgumentException_2_classLit = createForClass('java.lang.', 'IllegalArgumentException', 132), Lcom_google_gwt_core_client_impl_StringBufferImpl_2_classLit = createForClass('com.google.gwt.core.client.impl.', 'StringBufferImpl', 47), Lcom_google_gwt_logging_impl_LoggerImplRegular_2_classLit = createForClass('com.google.gwt.logging.impl.', 'LoggerImplRegular', 105), Ljava_util_logging_Handler_2_classLit = createForClass('java.util.logging.', 'Handler', 86), _3Ljava_util_logging_Handler_2_classLit = createForArray('[Ljava.util.logging.', 'Handler;', 197), Lcom_google_gwt_core_client_impl_StackTraceCreator$Collector_2_classLit = createForClass('com.google.gwt.core.client.impl.', 'StackTraceCreator$Collector', 46), Lcom_google_gwt_core_client_impl_StringBufferImplAppend_2_classLit = createForClass('com.google.gwt.core.client.impl.', 'StringBufferImplAppend', 48), Lcom_google_gwt_core_client_impl_SchedulerImpl_2_classLit = createForClass('com.google.gwt.core.client.impl.', 'SchedulerImpl', 43), Ljava_util_AbstractCollection_2_classLit = createForClass('java.util.', 'AbstractCollection', 145), Ljava_util_AbstractList_2_classLit = createForClass('java.util.', 'AbstractList', 154), Ljava_util_ArrayList_2_classLit = createForClass('java.util.', 'ArrayList', 158), Ljava_util_AbstractList$IteratorImpl_2_classLit = createForClass('java.util.', 'AbstractList$IteratorImpl', 155), Lcom_github_rma350_kidneyx_web_client_coredeps_WebGL_2_classLit = createForClass('com.github.rma350.kidneyx.web.client.coredeps.', 'WebGL', 20), Lcom_github_rma350_kidneyx_core_Engine_2_classLit = createForClass('com.github.rma350.kidneyx.core.', 'Engine', 8), Lcom_github_rma350_kidneyx_core_SceneDemos_2_classLit = createForClass('com.github.rma350.kidneyx.core.', 'SceneDemos', null), Lcom_github_rma350_kidneyx_core_SceneDemos$Node_2_classLit = createForClass('com.github.rma350.kidneyx.core.', 'SceneDemos$Node', 16), Lcom_github_rma350_kidneyx_core_SceneDemos$Graph_2_classLit = createForClass('com.github.rma350.kidneyx.core.', 'SceneDemos$Graph', 15), Lcom_github_rma350_kidneyx_core_Camera_2_classLit = createForClass('com.github.rma350.kidneyx.core.', 'Camera', 3), Ljava_util_logging_Level_2_classLit = createForClass('java.util.logging.', 'Level', 175), Ljava_util_logging_Level$LevelAll_2_classLit = createForClass('java.util.logging.', 'Level$LevelAll', 176), Ljava_util_logging_Level$LevelConfig_2_classLit = createForClass('java.util.logging.', 'Level$LevelConfig', 177), Ljava_util_logging_Level$LevelFine_2_classLit = createForClass('java.util.logging.', 'Level$LevelFine', 178), Ljava_util_logging_Level$LevelFiner_2_classLit = createForClass('java.util.logging.', 'Level$LevelFiner', 179), Ljava_util_logging_Level$LevelFinest_2_classLit = createForClass('java.util.logging.', 'Level$LevelFinest', 180), Ljava_util_logging_Level$LevelInfo_2_classLit = createForClass('java.util.logging.', 'Level$LevelInfo', 181), Ljava_util_logging_Level$LevelOff_2_classLit = createForClass('java.util.logging.', 'Level$LevelOff', 182), Ljava_util_logging_Level$LevelSevere_2_classLit = createForClass('java.util.logging.', 'Level$LevelSevere', 183), Ljava_util_logging_Level$LevelWarning_2_classLit = createForClass('java.util.logging.', 'Level$LevelWarning', 184), Ljava_util_logging_LogManager_2_classLit = createForClass('java.util.logging.', 'LogManager', 185), Ljava_util_logging_LogManager$RootLogger_2_classLit = createForClass('java.util.logging.', 'LogManager$RootLogger', 186), Lcom_google_gwt_logging_impl_LoggerWithExposedConstructor_2_classLit = createForClass('com.google.gwt.logging.impl.', 'LoggerWithExposedConstructor', 106), Lcom_github_rma350_kidneyx_web_client_coredeps_WebGLObjects_2_classLit = createForClass('com.github.rma350.kidneyx.web.client.coredeps.', 'WebGLObjects', 21), Lcom_github_rma350_kidneyx_core_PointsShader_2_classLit = createForClass('com.github.rma350.kidneyx.core.', 'PointsShader', 12), Lcom_github_rma350_kidneyx_core_CirclesShader_2_classLit = createForClass('com.github.rma350.kidneyx.core.', 'CirclesShader', 7), Lcom_github_rma350_kidneyx_core_LinesShader_2_classLit = createForClass('com.github.rma350.kidneyx.core.', 'LinesShader', 11), Lcom_github_rma350_kidneyx_core_Scene_2_classLit = createForClass('com.github.rma350.kidneyx.core.', 'Scene', 13), Lcom_github_rma350_kidneyx_core_NativeShapeBuffer_2_classLit = createForClass('com.github.rma350.kidneyx.core.', 'NativeShapeBuffer', 6), Lcom_github_rma350_kidneyx_core_LinesBuffer_2_classLit = createForClass('com.github.rma350.kidneyx.core.', 'LinesBuffer', 10), _3F_classLit = createForArray('', '[F', 198), Lcom_github_rma350_kidneyx_core_Lines_2_classLit = createForClass('com.github.rma350.kidneyx.core.', 'Lines', 9), Lcom_github_rma350_kidneyx_core_CirclesBuffer_2_classLit = createForClass('com.github.rma350.kidneyx.core.', 'CirclesBuffer', 5), Lcom_github_rma350_kidneyx_core_Circles_2_classLit = createForClass('com.github.rma350.kidneyx.core.', 'Circles', 4), Ljava_io_OutputStream_2_classLit = createForClass('java.io.', 'OutputStream', 97), Ljava_io_FilterOutputStream_2_classLit = createForClass('java.io.', 'FilterOutputStream', 96), Ljava_io_PrintStream_2_classLit = createForClass('java.io.', 'PrintStream', 95), Ljava_util_logging_LogRecord_2_classLit = createForClass('java.util.logging.', 'LogRecord', 187), Lcom_google_gwt_logging_client_ConsoleLogHandler_2_classLit = createForClass('com.google.gwt.logging.client.', 'ConsoleLogHandler', 85), Lcom_google_gwt_logging_client_DevelopmentModeLogHandler_2_classLit = createForClass('com.google.gwt.logging.client.', 'DevelopmentModeLogHandler', 87), Lcom_google_gwt_logging_client_FirebugLogHandler_2_classLit = createForClass('com.google.gwt.logging.client.', 'FirebugLogHandler', 88), Lcom_google_gwt_logging_client_SystemLogHandler_2_classLit = createForClass('com.google.gwt.logging.client.', 'SystemLogHandler', 103), Lcom_google_gwt_logging_client_NullLogHandler_2_classLit = createForClass('com.google.gwt.logging.client.', 'NullLogHandler', 101), Lcom_google_gwt_logging_client_NullLoggingPopup_2_classLit = createForClass('com.google.gwt.logging.client.', 'NullLoggingPopup', 102), Lcom_google_gwt_logging_client_HasWidgetsLogHandler_2_classLit = createForClass('com.google.gwt.logging.client.', 'HasWidgetsLogHandler', 89), Ljava_lang_StringBuffer_2_classLit = createForClass('java.lang.', 'StringBuffer', 141), Ljava_util_AbstractMap_2_classLit = createForClass('java.util.', 'AbstractMap', 147), Ljava_util_AbstractHashMap_2_classLit = createForClass('java.util.', 'AbstractHashMap', 146), Ljava_util_AbstractSet_2_classLit = createForClass('java.util.', 'AbstractSet', 149), Ljava_util_AbstractHashMap$EntrySet_2_classLit = createForClass('java.util.', 'AbstractHashMap$EntrySet', 148), Ljava_util_AbstractHashMap$EntrySetIterator_2_classLit = createForClass('java.util.', 'AbstractHashMap$EntrySetIterator', 150), Ljava_util_AbstractMapEntry_2_classLit = createForClass('java.util.', 'AbstractMapEntry', 152), Ljava_util_AbstractHashMap$MapEntryNull_2_classLit = createForClass('java.util.', 'AbstractHashMap$MapEntryNull', 151), Ljava_util_AbstractHashMap$MapEntryString_2_classLit = createForClass('java.util.', 'AbstractHashMap$MapEntryString', 153), Ljava_util_AbstractMap$2_2_classLit = createForClass('java.util.', 'AbstractMap$2', 156), Ljava_util_AbstractMap$2$1_2_classLit = createForClass('java.util.', 'AbstractMap$2$1', 157), Ljava_util_HashMap_2_classLit = createForClass('java.util.', 'HashMap', 171), Lcom_github_rma350_kidneyx_core_ShaderUtil_2_classLit = createForClass('com.github.rma350.kidneyx.core.', 'ShaderUtil', null), Ljava_util_Date_2_classLit = createForClass('java.util.', 'Date', 169), Lcom_google_gwt_core_shared_SerializableThrowable_2_classLit = createForClass('com.google.gwt.core.shared.', 'SerializableThrowable', 50), Ljava_util_logging_Formatter_2_classLit = createForClass('java.util.logging.', 'Formatter', 92), Lcom_google_gwt_logging_impl_FormatterImpl_2_classLit = createForClass('com.google.gwt.logging.impl.', 'FormatterImpl', 91), Lcom_google_gwt_logging_client_TextLogFormatter_2_classLit = createForClass('com.google.gwt.logging.client.', 'TextLogFormatter', 104), Lcom_google_gwt_logging_impl_StackTracePrintStream_2_classLit = createForClass('com.google.gwt.logging.impl.', 'StackTracePrintStream', 94), Lcom_google_gwt_logging_client_HtmlLogFormatter_2_classLit = createForClass('com.google.gwt.logging.client.', 'HtmlLogFormatter', 90), Lcom_google_gwt_logging_client_HtmlLogFormatter$1_2_classLit = createForClass('com.google.gwt.logging.client.', 'HtmlLogFormatter$1', 93), Ljava_lang_UnsupportedOperationException_2_classLit = createForClass('java.lang.', 'UnsupportedOperationException', 144), Lcom_google_gwt_user_client_ui_UIObject_2_classLit = createForClass('com.google.gwt.user.client.ui.', 'UIObject', 124), Lcom_google_gwt_user_client_ui_Widget_2_classLit = createForClass('com.google.gwt.user.client.ui.', 'Widget', 123), Lcom_google_gwt_user_client_ui_LabelBase_2_classLit = createForClass('com.google.gwt.user.client.ui.', 'LabelBase', 122), Lcom_google_gwt_user_client_ui_Label_2_classLit = createForClass('com.google.gwt.user.client.ui.', 'Label', 121), Lcom_google_gwt_user_client_ui_HTML_2_classLit = createForClass('com.google.gwt.user.client.ui.', 'HTML', 120), Lcom_google_gwt_i18n_client_HasDirection$Direction_2_classLit = createForEnum('com.google.gwt.i18n.client.', 'HasDirection$Direction', 72, values_1), _3Lcom_google_gwt_i18n_client_HasDirection$Direction_2_classLit = createForArray('[Lcom.google.gwt.i18n.client.', 'HasDirection$Direction;', 199), Lcom_github_rma350_kidneyx_web_client_coredeps_WebNativeFloatBuffer_2_classLit = createForClass('com.github.rma350.kidneyx.web.client.coredeps.', 'WebNativeFloatBuffer', 29), Ljava_util_NoSuchElementException_2_classLit = createForClass('java.util.', 'NoSuchElementException', 173), Ljava_lang_IndexOutOfBoundsException_2_classLit = createForClass('java.lang.', 'IndexOutOfBoundsException', 134), Ljava_util_Collections$UnmodifiableCollection_2_classLit = createForClass('java.util.', 'Collections$UnmodifiableCollection', 160), Ljava_util_Collections$UnmodifiableList_2_classLit = createForClass('java.util.', 'Collections$UnmodifiableList', 162), Ljava_util_Collections$UnmodifiableMap_2_classLit = createForClass('java.util.', 'Collections$UnmodifiableMap', 163), Ljava_util_Collections$UnmodifiableSet_2_classLit = createForClass('java.util.', 'Collections$UnmodifiableSet', 165), Ljava_util_Collections$UnmodifiableMap$UnmodifiableEntrySet_2_classLit = createForClass('java.util.', 'Collections$UnmodifiableMap$UnmodifiableEntrySet', 164), Ljava_util_Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry_2_classLit = createForClass('java.util.', 'Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry', 167), Ljava_util_Collections$UnmodifiableRandomAccessList_2_classLit = createForClass('java.util.', 'Collections$UnmodifiableRandomAccessList', 168), Ljava_util_Collections$UnmodifiableCollectionIterator_2_classLit = createForClass('java.util.', 'Collections$UnmodifiableCollectionIterator', 161), Ljava_util_Collections$UnmodifiableMap$UnmodifiableEntrySet$1_2_classLit = createForClass('java.util.', 'Collections$UnmodifiableMap$UnmodifiableEntrySet$1', 166), Ljava_util_MapEntryImpl_2_classLit = createForClass('java.util.', 'MapEntryImpl', 172), Ljava_lang_IllegalStateException_2_classLit = createForClass('java.lang.', 'IllegalStateException', 133), Lcom_google_gwt_user_client_ui_DirectionalTextHelper_2_classLit = createForClass('com.google.gwt.user.client.ui.', 'DirectionalTextHelper', 119), Lcom_google_gwt_dom_client_Style$TextAlign_2_classLit = createForEnum('com.google.gwt.dom.client.', 'Style$TextAlign', 60, values_0), _3Lcom_google_gwt_dom_client_Style$TextAlign_2_classLit = createForArray('[Lcom.google.gwt.dom.client.', 'Style$TextAlign;', 200), Lcom_google_gwt_dom_client_Style$TextAlign$1_2_classLit = createForEnum('com.google.gwt.dom.client.', 'Style$TextAlign$1', 62, null), Lcom_google_gwt_dom_client_Style$TextAlign$2_2_classLit = createForEnum('com.google.gwt.dom.client.', 'Style$TextAlign$2', 63, null), Lcom_google_gwt_dom_client_Style$TextAlign$3_2_classLit = createForEnum('com.google.gwt.dom.client.', 'Style$TextAlign$3', 64, null), Lcom_google_gwt_dom_client_Style$TextAlign$4_2_classLit = createForEnum('com.google.gwt.dom.client.', 'Style$TextAlign$4', 65, null);\n$sendStats('moduleStartup', 'moduleEvalEnd');\ngwtOnLoad(__gwtModuleFunction.__errFn, __gwtModuleFunction.__moduleName, __gwtModuleFunction.__moduleBase, __gwtModuleFunction.__softPermutationId,__gwtModuleFunction.__computePropValue);\n$sendStats('moduleStartup', 'end');\n//# sourceURL=kidneyxweb-0.js\n"]);
